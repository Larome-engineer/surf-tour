from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import PreCheckoutQuery, SuccessfulPayment, BufferedInputFile

from bot.config import NOTIFICATION_CHAT
from bot.create import payment_payload, surf_bot
from bot.handlers.handler_utils import safe_send_document, safe_send
from bot.keyboards.user import user_main_menu
from database import service
from utils.generate_pdf import generate_invoice_pdf_lesson, generate_invoice_pdf_tour

payment = Router()


@payment.pre_checkout_query()
async def process_pre_checkout(event: PreCheckoutQuery, state: FSMContext):
    payload = event.invoice_payload
    if payload == "event: ApplyUserLessonBooking":
        lesson = await service.get_lesson_by_code(
            payment_payload[event.from_user.id]['lesson']['unicode']
        )
        if not lesson or int(lesson['places']) <= 0:
            payment_payload.pop(event.from_user.id)
            await state.clear()
            await event.answer(
                ok=False,
                error_message="‚ùå <b>–ú–µ—Å—Ç–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å...\n‚Ä¢ –≠—Ç–æ—Ç —É—Ä–æ–∫ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.</b>",
            )
            await surf_bot.delete_message(
                chat_id=event.from_user.id,
                message_id=event.id,
            )
            return
        payment_payload[event.from_user.id]['lesson']['lesson'] = lesson
        await event.answer(ok=True)

    elif payload == "event: ApplyUserTourBooking":
        tour = await service.get_tour_by_name(
            payment_payload[event.from_user.id]['tour']['tour_name']
        )

        if not tour or int(tour['places']) <= 0:
            payment_payload.pop(event.from_user.id)
            await state.clear()
            await event.answer(
                ok=False,
                error_message="‚ùå –ú–µ—Å—Ç–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å(\n\n–≠—Ç–æ—Ç —Ç—É—Ä –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
            )
            await surf_bot.delete_message(
                chat_id=event.from_user.id,
                message_id=event.id,
            )
            return
        payment_payload[event.from_user.id]['tour']['tour'] = tour
        await event.answer(ok=True)


@payment.message(F.successful_payment)
async def successful_payment(event: SuccessfulPayment):
    payment_info: SuccessfulPayment = event.successful_payment
    payload_data: str = payment_info.invoice_payload
    if payload_data == "event: ApplyUserLessonBooking":
        lesson: dict = payment_payload[event.from_user.id]['lesson']['lesson']
        unicode: str = payment_payload[event.from_user.id]['lesson']['unicode']
        places: int = int(payment_payload[event.from_user.id]['lesson']['places'])
        price: int = int(payment_payload[event.from_user.id]['lesson']['price'])
        payment_payload.pop(event.from_user.id)

        user_entity = await service.get_user_by_tg_id(event.from_user.id)
        paid = await service.create_surf_payment(
            tg_id=event.from_user.id, price=price, code=unicode
        )

        if paid:
            await service.reduce_places_on_lesson(code=unicode, count=places)
            result = [
                f"<b> üé´ –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û üé´</b>\n\n"
                f"üèÑ <b>{lesson['type']}</b>\n"
                f"üó∫ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {lesson['dest']}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {lesson['desc']}\n"
                f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {lesson['time']}\n"
                f"‚åõÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {lesson['duration']}\n"
                f"üìÖ –î–∞—Ç–∞: {lesson['start_date']}\n"
                f"üë• –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç: {places}\n"
                f"üí∂ –û–ø–ª–∞—á–µ–Ω–æ: {price}\n"
            ]

            pdf = await generate_invoice_pdf_lesson(
                user_name=user_entity['name'],
                lsn_type=lesson['type'],
                destination=lesson['dest'],
                start_date=lesson['start_date'],
                time=lesson['time'],
                duration=lesson['duration'],
                places=places,
                price=price,
            )

            pdf_file = BufferedInputFile(
                pdf.getvalue(),
                filename=f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ_{lesson['type']} | {lesson['start_date']} | {user_entity['name']}.pdf"
            )
            result.append(f"üë®üèª‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_entity['name']} (üìû {user_entity['phone']})")
            await safe_send_document(event.from_user.id, pdf_file)
            await event.answer(f"{'\n'.join(result)}", reply_markup=user_main_menu())
            await safe_send(
                text=f"üèÑ‚úÖ –ù–û–í–û–ï –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï –£–†–û–ö–ê:\n\n{'\n'.join(result)}",
                chat_id=NOTIFICATION_CHAT
            )
        else:
            await event.answer(
                text=f"<b>‚ùå –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, "
                     f"–æ–¥–Ω–∞–∫–æ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ –∏ –í–∞—à —á–µ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –í–∞–º!</b>",
                reply_markup=user_main_menu()
            )

    elif payload_data == "event: ApplyUserTourBooking":
        tour: dict = payment_payload[event.from_user.id]['tour']['tour']
        tour_name: str = payment_payload[event.from_user.id]['tour']['tour_name']
        places: int = int(payment_payload[event.from_user.id]['tour']['places'])
        price: int = int(payment_payload[event.from_user.id]['tour']['price'])
        payment_payload.pop(event.from_user.id)

        user_entity = await service.get_user_by_tg_id(event.from_user.id)
        paid = await service.create_tour_payment(
            tg_id=event.from_user.id, price=price, tour_name=tour_name
        )

        if paid:
            await service.reduce_places_on_tour(tour_name=tour_name, count=places)
            result = [
                f"<b> üé´ –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û üé´</b>\n\n"
                f"üèï {tour_name}\n"
                f"üó∫ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {tour['dest']}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {tour['desc']}\n"
                f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {tour['time']}\n"
                f"üìÖ –î–∞—Ç—ã: {tour['start_date']} - {tour['end_date']}\n"
                f"üë• –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç: {places}\n"
                f"üí∂ –û–ø–ª–∞—á–µ–Ω–æ: {price}\n"
            ]

            pdf = await generate_invoice_pdf_tour(
                user_name=user_entity['name'],
                name=tour_name,
                destination=tour['dest'],
                start_date=tour['start_date'],
                time=tour['time'],
                end_date=tour['end_date'],
                places=places,
                price=price,
            )

            pdf_file = BufferedInputFile(
                file=pdf.getvalue(),
                filename=f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ_{tour_name} | {user_entity['name']}.pdf"
            )

            await safe_send_document(event.from_user.id, pdf_file)
            await event.answer(f"{'\n'.join(result)}", reply_markup=user_main_menu())
            await safe_send(
                text=f"üèï‚úÖ –ù–û–í–û–ï –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï –¢–£–†–ê:\n\n{'\n'.join(result)}",
                chat_id=NOTIFICATION_CHAT
            )
        else:
            await event.answer(
                text=f"–ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, "
                     f"–æ–¥–Ω–∞–∫–æ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ –∏ –í–∞—à —á–µ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –í–∞–º!",
                reply_markup=user_main_menu()
            )
