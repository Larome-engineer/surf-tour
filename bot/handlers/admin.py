from aiogram.fsm.state import StatesGroup, State
from aiogram_calendar import SimpleCalendarCallback

import service
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from bot.notifications.user_notification import *
from aiogram.types import Message, CallbackQuery
from aiogram_calendar.simple_calendar import SimpleCalendar

from bot.filters.isAdmin import IsAdmin
from bot.keyboards.admin import *

admin = Router()


@admin.callback_query(F.data == "backtoadminmenu", IsAdmin())
async def back_to_menu(event: CallbackQuery, state: FSMContext):
    await state.clear()
    await event.answer()
    await event.message.delete()
    await event.message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=main_menu().as_markup())


@admin.callback_query(F.data == "backtotouranddirect", IsAdmin())
async def back_to_menu(event: CallbackQuery, state: FSMContext):
    await state.clear()
    await event.answer()
    await event.message.delete()
    await event.message.answer("–¢—É—Ä—ã –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", reply_markup=tour_and_directions().as_markup())


@admin.callback_query(F.data == "backtousermenu", IsAdmin())
async def back_to_menu(event: CallbackQuery, state: FSMContext):
    await state.clear()
    await event.answer()
    await event.message.delete()
    await event.message.answer("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", reply_markup=user_menu().as_markup())


@admin.callback_query(F.data == "backtotourmenu", IsAdmin())
async def back_to_menu(event: CallbackQuery, state: FSMContext):
    await state.clear()
    await event.answer()
    await event.message.delete()
    await event.message.answer("–¢—É—Ä—ã", reply_markup=tour_menu().as_markup())


@admin.callback_query(F.data == "backtodirectmenu", IsAdmin())
async def back_to_menu(event: CallbackQuery, state: FSMContext):
    await state.clear()
    await event.answer()
    await event.message.delete()
    await event.message.answer("–¢—É—Ä—ã", reply_markup=direct_menu().as_markup())


class AddTour(StatesGroup):
    direction = State()
    name = State()
    desc = State()
    places = State()
    start = State()
    end = State()
    price = State()


@admin.callback_query(F.data == "addtour", IsAdmin())
async def add_tour(event: CallbackQuery, state: FSMContext):
    await state.clear()
    await event.answer()
    await event.message.delete()
    directions = await service.get_all_dest()
    if directions is None:
        await event.message.answer(
            text="<b>–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã 1 –Ω–∞–≤–ø—Ä–ª–µ–Ω–∏–µ</b>",
            reply_markup=tour_menu().as_markup()
        )
    else:
        builder = InlineKeyboardBuilder()
        for _ in directions:
            builder.row(InlineKeyboardButton(text=_, callback_data=f"dest_{_}"))
        builder.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="backtotourmenu"))
        await event.message.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–∞ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö</b>", reply_markup=builder.as_markup())
        await state.set_state(AddTour.direction)


@admin.callback_query(AddTour.direction, IsAdmin())
async def add_tour(event: CallbackQuery, state: FSMContext):
    dest = event.data.split("_")[1]
    await state.update_data(dest=dest)
    await event.answer()
    await event.message.delete()
    await event.message.answer("<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–∞</b>")
    await state.set_state(AddTour.name)


@admin.message(AddTour.name, IsAdmin())
async def add_tour(event: Message, state: FSMContext):
    await state.update_data(name=event.text)
    await event.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–∞")
    await state.set_state(AddTour.desc)


@admin.message(AddTour.desc, IsAdmin())
async def add_tour(event: Message, state: FSMContext):
    await state.update_data(desc=event.text)
    await event.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±—â–µ–µ –∫–æ–ª-–≤–æ –º–µ—Å—Ç –Ω–∞ —Ç—É—Ä")
    await state.set_state(AddTour.places)


@admin.message(AddTour.places, IsAdmin())
async def add_tour(event: Message, state: FSMContext):
    await state.update_data(places=event.text)
    await event.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–∞", reply_markup=await SimpleCalendar(locale="ru_RU").start_calendar())
    await state.set_state(AddTour.start)


@admin.callback_query(SimpleCalendarCallback.filter(), AddTour.start, IsAdmin())
async def add_start_tour(event: CallbackQuery, callback_data: SimpleCalendarCallback, state: FSMContext):
    selected, date = await SimpleCalendar(locale="ru_RU").process_selection(event, callback_data)
    if selected:
        await state.update_data(start=date)
        await event.message.delete()
        await event.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –∫–æ–Ω—Ü–∞ —Ç—É—Ä–∞",
                                   reply_markup=await SimpleCalendar(locale="ru_RU").start_calendar())
        await state.set_state(AddTour.end)


@admin.callback_query(SimpleCalendarCallback.filter(), AddTour.end, IsAdmin())
async def add_end_tour(event: CallbackQuery, callback_data: SimpleCalendarCallback, state: FSMContext):
    selected, date = await SimpleCalendar(locale="ru_RU").process_selection(event, callback_data)
    if selected:
        await state.update_data(end=date)
        await event.message.delete()
        await event.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—É—Ä–∞")
        await state.set_state(AddTour.price)


@admin.message(AddTour.price, IsAdmin())
async def add_tour(event: Message, state: FSMContext):
    await state.update_data(price=event.text)
    tour_data = await state.get_data()
    await state.clear()
    tour = await service.create_tour(
        name=tour_data['name'],
        desc=tour_data['desc'],
        places=tour_data['places'],
        start=tour_data['start'],
        end=tour_data['end'],
        price=tour_data['price'],
        destination=tour_data['dest']
    )
    if tour:
        await event.answer(f"–¢—É—Ä –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é {tour_data['dest']} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
                           reply_markup=tour_menu().as_markup())
    else:
        await event.answer("–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏ —Ç—É—Ä–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=tour_menu().as_markup())


class AddDirection(StatesGroup):
    direction = State()


@admin.callback_query(F.data == "adddirection", IsAdmin())
async def add_direction_start(event: CallbackQuery, state: FSMContext):
    await state.clear()
    await event.answer()
    await event.message.delete()
    await event.message.answer("<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</b>")
    await state.set_state(AddDirection.direction)


@admin.message(AddDirection.direction, IsAdmin())
async def add_direction(event: Message, state: FSMContext):
    direction = await service.create_destination(event.text)
    if direction:
        await event.answer("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!", reply_markup=direct_menu().as_markup())
    else:
        await event.answer(
            text="–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
            reply_markup=direct_menu().as_markup()
        )
    await state.clear()


class DeleteDirection(StatesGroup):
    dir_name = State()


@admin.callback_query(F.data == "deletedirection", IsAdmin())
async def delete_direction(event: CallbackQuery, state: FSMContext):
    await state.clear()
    await event.answer()
    await event.message.delete()
    await event.message.answer("–í–ù–ò–ú–ê–ù–ò–ï! –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, "
                               "—É–¥–∞–ª—è—Ç—Å—è –≤—Å–µ —Ç—É—Ä—ã –ø–æ —ç—Ç–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é! "
                               "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", reply_markup=apply_delete_dir().as_markup())


@admin.callback_query(F.data.startswith("deletedir"), IsAdmin())
async def delete_direction(event: CallbackQuery, state: FSMContext):
    await state.clear()
    await event.answer()
    await event.message.delete()
    call = event.data.split("_")[1]
    if call == 'decline':
        await event.message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏", reply_markup=direct_menu().as_markup())
    elif call == "apply":
        directions = await service.get_all_dest()
        if directions is not None:
            builder = InlineKeyboardBuilder()
            for _ in directions:
                builder.row(
                    InlineKeyboardButton(text=_, callback_data=f"directiondeleteadmin_{_}"))
            builder.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="backtodirectmenu"))
            await event.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=builder.as_markup())
            await state.set_state(DeleteDirection.dir_name)


@admin.callback_query(F.data.startswith("directiondeleteadmin_"), DeleteDirection.dir_name, IsAdmin())
async def delete_direction(event: CallbackQuery, state: FSMContext):
    await state.clear()
    await event.answer()
    await event.message.delete()
    call = event.data.split("_")[1]
    deleted = await service.delete_dest(call)
    if deleted:
        await event.message.answer(f"–ù–∞–≤–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {call} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ", reply_markup=direct_menu().as_markup())
    else:
        await event.message.answer("–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=direct_menu().as_markup())


####### TOURS AND DIRECTIONS #######
@admin.callback_query(F.data == "bookedtours", IsAdmin())
async def booked_tours(event: CallbackQuery, state: FSMContext):
    await state.clear()
    await event.answer()
    await event.message.delete()
    booked = await service.get_all_booked_tours()
    if booked is not None:
        result = ["üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—É—Ä–æ–≤:</b>\n"]
        for i, tour in enumerate(booked, start=1):
            result.append(
                f"<b>#{i}. <code>{tour['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å']}</code></b>\n"
                f"üìù {tour['–¢—É—Ä']}\n"
                f"üë• –¶–µ–Ω–∞: {tour['–¶–µ–Ω–∞']}"
            )
        await event.message.answer(f"{"\n".join(result)}", reply_markup=tour_menu().as_markup())
    else:
        await event.message.answer(f"–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—É—Ä–æ–≤", reply_markup=tour_menu().as_markup())


@admin.callback_query(F.data == "toursanddirections", IsAdmin())
async def tours_and_directions(event: CallbackQuery, state: FSMContext):
    await state.clear()
    await event.answer()
    await event.message.delete()
    await event.message.answer("<b>–û–ø—Ü–∏–∏ —Ç—É—Ä–æ–≤ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π</b>", reply_markup=tour_and_directions().as_markup())


@admin.callback_query(F.data.startswith('management'), IsAdmin())
async def tours_and_directions(event: CallbackQuery, state: FSMContext):
    await state.clear()
    await event.answer()
    await event.message.delete()

    call = event.data.split("_")[1]
    if call == 'tour':
        await event.message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–∞–º–∏", reply_markup=tour_menu().as_markup())
    elif call == 'direct':
        await event.message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏", reply_markup=direct_menu().as_markup())


@admin.callback_query(F.data == "tourlist", IsAdmin())
async def tours_list(event: CallbackQuery, state: FSMContext):
    await state.clear()
    await event.answer()
    await event.message.delete()
    tours = await service.get_all_tours()
    if tours is None:
        await event.message.answer(f"<b>–ü–æ–∫–∞ –Ω–µ—Ç —Ç—É—Ä–æ–≤</b>", reply_markup=tour_menu().as_markup())
        return

    result = ["üìã <b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—É—Ä–æ–≤:</b>\n<i>–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π —Ç—É—Ä –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ</i>\n\n"]
    for i, tour in enumerate(tours, start=1):
        result.append(
            f"<b>#{i}. <code>{tour['–ù–∞–∑–≤–∞–Ω–∏–µ']}</code></b>\n"
            f"üîú {tour['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ']}\n"
            f"üìÖ {tour['–î–∞—Ç—ã']}\n"
        )

    builder = InlineKeyboardBuilder()
    for _ in tours:
        builder.row(InlineKeyboardButton(text=_['–ù–∞–∑–≤–∞–Ω–∏–µ'], callback_data=f"informtouradmin_{_['–ù–∞–∑–≤–∞–Ω–∏–µ']}"))
    builder.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="backtotourmenu"))

    await event.message.answer(f"{'\n'.join(result)}", reply_markup=builder.as_markup())


@admin.callback_query(F.data == "tourbydirect", IsAdmin())
async def tours_by_dest(event: CallbackQuery, state: FSMContext):
    await state.clear()
    await event.answer()
    await event.message.delete()
    directions = await service.get_all_dest()
    if directions is not None:
        builder = InlineKeyboardBuilder()
        for _ in directions:
            builder.row(
                InlineKeyboardButton(text=_, callback_data=f"searchbydirectionadmin_{_}"))
        builder.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="backtotourmenu"))
        await event.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏", reply_markup=builder.as_markup())
    else:
        await event.message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π", reply_markup=tour_menu().as_markup())


@admin.callback_query(F.data.startswith("searchbydirectionadmin_"), IsAdmin())
async def tours_by_dest(event: CallbackQuery, state: FSMContext):
    await state.clear()
    await event.answer()
    await event.message.delete()
    call = event.data.split("_")[1]
    tours = await service.get_all_tour_by_dest(call)
    if tours is not None:
        result = ["üìã <b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—É—Ä–æ–≤</b>\n<i>–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π —Ç—É—Ä –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ</i>\n\n"]
        for i, tour in enumerate(tours, start=1):
            result.append(
                f"<b>#{i}. <code>{tour['–ù–∞–∑–≤–∞–Ω–∏–µ']}</code></b>\n"
                f"üîú {tour['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ']}\n"
                f"üìÖ {tour['–î–∞—Ç—ã']}\n"
            )
        builder = InlineKeyboardBuilder()
        for _ in tours:
            builder.row(InlineKeyboardButton(text=_['–ù–∞–∑–≤–∞–Ω–∏–µ'], callback_data=f"informtouradmin_{_['–ù–∞–∑–≤–∞–Ω–∏–µ']}"))
        builder.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="backtotourmenu"))
        await event.message.answer(f"{'\n'.join(result)}", reply_markup=builder.as_markup())
    else:
        await event.message.answer("–¢—É—Ä–æ–≤ –ø–æ –¥–∞–Ω–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–∫–∞ –Ω–µ—Ç", reply_markup=tour_menu().as_markup())


@admin.callback_query(F.data == "admintourinfo", IsAdmin())
async def tours_list(event: CallbackQuery, state: FSMContext):
    await state.clear()
    await event.answer()
    await event.message.delete()
    tours = await service.get_all_tours()
    if tours is not None:
        builder = InlineKeyboardBuilder()
        for _ in tours:
            builder.row(InlineKeyboardButton(text=_['–ù–∞–∑–≤–∞–Ω–∏–µ'], callback_data=f"informtouradmin_{_['–ù–∞–∑–≤–∞–Ω–∏–µ']}"))
        builder.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="backtotourmenu"))
        await event.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", reply_markup=builder.as_markup())
    else:
        await event.message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Ç—É—Ä–æ–≤", reply_markup=tour_menu().as_markup())


@admin.callback_query(F.data.startswith("informtouradmin_"), IsAdmin())
async def tour_information(event: CallbackQuery, state: FSMContext):
    await state.clear()
    await event.answer()
    await event.message.delete()
    call = event.data.split('_')[1]
    tour = await service.get_tour_by_name(call)
    if tour is not None:
        result = [f"<b>{tour['–ù–∞–∑–≤–∞–Ω–∏–µ'].upper()}</b>\n\n"
                  f"üîú {tour['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ']}\n"
                  f"üìù {tour['–û–ø–∏—Å–∞–Ω–∏–µ']}\n"
                  f"üë• –ú–µ—Å—Ç–∞: {tour['–ú–µ—Å—Ç–∞']}\n"
                  f"üìÖ {tour['–î–∞—Ç—ã']}\n"
                  f"üí∞ {str(tour['–¶–µ–Ω–∞']) + "‚ÇΩ"}\n"
                  ]

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç –Ω–∞ —Ç—É—Ä", callback_data=f"addplacestouradmin_{tour['–ù–∞–∑–≤–∞–Ω–∏–µ']}"),
            InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ç—É—Ä", callback_data=f"tourtodeleteadmin_{tour['–ù–∞–∑–≤–∞–Ω–∏–µ']}"),
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="tourlist"),
            width=1
        )
        await event.message.answer(f"{"\n".join(result)}", reply_markup=builder.as_markup())
    else:
        await event.message.answer(f"<b>–ü–æ–∫–∞ –Ω–µ—Ç —Ç—É—Ä–æ–≤</b>", reply_markup=tour_menu().as_markup())


@admin.callback_query(F.data == "directionslist", IsAdmin())
async def directions_list(event: CallbackQuery, state: FSMContext):
    await state.clear()
    await event.answer()
    await event.message.delete()
    directions = await service.get_all_dest()
    if directions is not None:
        result = ["üìã <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π:</b>\n"]
        for i, direct in enumerate(directions, start=1):
            result.append(
                f"<b>#{i}. {direct}</b>"
            )
        await event.message.answer(text=f"{'\n'.join(result)}", reply_markup=direct_menu().as_markup())
    else:
        await event.message.answer(f"<b>–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π</b>", reply_markup=direct_menu().as_markup())


####### USERS #######
@admin.callback_query(F.data == "users", IsAdmin())
async def users(event: CallbackQuery, state: FSMContext):
    await state.clear()
    await event.answer()
    await event.message.delete()
    await event.message.answer("<b>–û–ø—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>", reply_markup=user_menu().as_markup())


class Mailing(StatesGroup):
    message = State()


@admin.callback_query(F.data == "usermailng", IsAdmin())
async def mailing(event: CallbackQuery, state: FSMContext):
    await state.clear()
    await event.answer()
    await event.message.delete()
    await event.message.answer("<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>")
    await state.set_state(Mailing.message)


@admin.message(Mailing.message, IsAdmin())
async def send_mailing(event: Message, state: FSMContext):
    mailing_message = event.message_id
    await surf_bot.copy_message(
        chat_id=event.chat.id, from_chat_id=event.chat.id,
        message_id=mailing_message, reply_markup=confirm_mailing().as_markup()
    )

    await state.update_data(msg=mailing_message)


@admin.callback_query(F.data == 'decline_mailing')
async def decline_mailing(event: CallbackQuery, state: FSMContext):
    await state.clear()
    await event.answer()
    await event.message.delete()
    await event.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=user_menu().as_markup())


@admin.callback_query(F.data == 'send_mailing')
async def mailing_handler(event: CallbackQuery, state: FSMContext):
    errors_count = 0
    good_count = 0
    data = await state.get_data()
    await state.clear()
    await event.answer()
    mailing_message = data['msg']
    user_list = await service.get_all_users_ids()
    if user_list is None or len(user_list) == 0:
        await event.answer()
        await event.message.delete()
        await event.message.answer(
            text="–£ –í–∞—Å –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
            reply_markup=user_menu().as_markup()
        )
        return
    await event.message.delete()

    message = await event.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞...")
    for user in user_list:
        try:
            await surf_bot.copy_message(
                chat_id=user.user_tg_id,
                from_chat_id=event.from_user.id,
                message_id=mailing_message
            )
            good_count += 1
        except Exception as ex:
            errors_count += 1
            print(ex)

    await surf_bot.delete_message(chat_id=event.from_user.id, message_id=message.message_id)
    await event.message.answer(
        text=f"<b>–ö–æ–ª-–≤–æ –æ—Ç–æ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:</b> <code>{good_count}</code>\n"
             f"<b>–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏—Ö –±–æ—Ç–∞:</b> <code>{errors_count}</code>",
        reply_markup=user_menu().as_markup()
    )


@admin.callback_query(F.data == "userslist", IsAdmin())
async def get_all_users(event: CallbackQuery, state: FSMContext):
    await state.clear()
    await event.answer()
    await event.message.delete()
    user_list = await service.get_all_users()
    if user_list is not None:
        result = ["üìã <b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"]
        for i, user in enumerate(user_list, start=1):
            result.append(
                f"<b>#{i}. {user['–ò–º—è']}</code></b>\n"
                f"üîú<code>{user['Telegram ID']}</code>\n"
                f"üìù {user['–¢–µ–ª–µ—Ñ–æ–Ω']}\n"
                f"üë• {user['–ü–æ—á—Ç–∞']}\n"
            )
            await event.message.answer(f"{'\n'.join(result)}", reply_markup=user_menu().as_markup())
    else:
        await event.message.answer("–í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", reply_markup=user_menu().as_markup())


@admin.callback_query(F.data == "userinfo", IsAdmin())
async def user_get_info(event: CallbackQuery, state: FSMContext):
    await state.clear()
    await event.answer()
    await event.message.delete()
    await event.message.answer("–í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –ø–æ–∏—Å–∫–∞", reply_markup=user_info().as_markup())


class SearchUser(StatesGroup):
    telegram_id = State()
    email_or_phone = State()


@admin.callback_query(F.data == "searchbytgid", IsAdmin())
async def user_by_telegram_id(event: CallbackQuery, state: FSMContext):
    await state.clear()
    await event.answer()
    await event.message.delete()
    await event.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    await state.set_state(SearchUser.telegram_id)


@admin.message(SearchUser.telegram_id, IsAdmin())
async def user_by_telegram_id(event: Message, state: FSMContext):
    await state.clear()
    user = await service.get_user_by_tg_id(int(event.text))
    if user:
        tours = "\n".join([f"‚Äì {t.tour.tour_name}" for t in user.tours]) or "–ù–µ—Ç —Ç—É—Ä–æ–≤"
        user = (
            f"üë§ <b>{user.user_name}</b>\n"
            f"üìß {user.user_email}\n"
            f"üì± {user.user_phone}\n\n"
            f"üß≥ <b>–¢—É—Ä(—ã):</b>\n{tours}"
        )
        await event.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n{user}", reply_markup=user_info().as_markup())
    else:
        await event.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c id:\n{event.text} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", reply_markup=user_info().as_markup())


@admin.callback_query(F.data == "searchbyemailorphone", IsAdmin())
async def user_by_email_of_phone(event: CallbackQuery, state: FSMContext):
    await state.clear()
    await event.answer()
    await event.message.delete()
    await event.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—á—Ç—É –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    await state.set_state(SearchUser.email_or_phone)


@admin.message(SearchUser.email_or_phone, IsAdmin())
async def user_by_email_of_phone(event: Message, state: FSMContext):
    await state.clear()
    user = await service.get_user_by_phone_or_email(event.text)
    if user:
        tours = "\n".join([f"‚Äì {t.tour.tour_name}" for t in user.tours]) or "–ù–µ—Ç —Ç—É—Ä–æ–≤"
        user = (
            f"üë§ <b>{user.user_name}</b>\n"
            f"üìß {user.user_email}\n"
            f"üì± {user.user_phone}\n\n"
            f"üß≥ <b>–¢—É—Ä(—ã):</b>\n{tours}"
        )
        await event.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n{user}", reply_markup=user_info().as_markup())
    else:
        await event.answer(f"–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", reply_markup=user_info().as_markup())


class AddTourPlaces(StatesGroup):
    places = State()


# @admin.callback_query(F.data == "addtourplaces", IsAdmin())
# async def add_tour_places(event: CallbackQuery, state: FSMContext):
#     await state.clear()
#     await event.answer()
#     await event.message.delete()
#     tours = await service.get_all_tours()
#     if tours is not None:
#         builder = InlineKeyboardBuilder()
#         for _ in tours:
#             builder.row(InlineKeyboardButton(text=_['–ù–∞–∑–≤–∞–Ω–∏–µ'], callback_data=f"addplacestouradmin_{_['–ù–∞–∑–≤–∞–Ω–∏–µ']}"))
#         builder.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="backtotourmenu"))
#         await event.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", reply_markup=builder.as_markup())
#         await state.set_state(AddTourPlaces.name)
#     else:
#         await event.message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Ç—É—Ä–æ–≤", reply_markup=tour_menu().as_markup())


@admin.callback_query(F.data.startswith("addplacestouradmin_"), IsAdmin())
async def add_tour_places(event: CallbackQuery, state: FSMContext):
    call = event.data.split("_")[1]
    await state.update_data(name=call)
    await event.answer()
    await event.message.delete()
    await event.message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –¥–æ–±–∞–≤–ª—è–µ–º—ã—Ö –º–µ—Å—Ç",
        reply_markup=back_to("–û—Ç–º–µ–Ω–∞", "tourlist").as_markup()
    )
    await state.set_state(AddTourPlaces.places)


@admin.message(AddTourPlaces.places, IsAdmin())
async def add_tour_places(event: Message, state: FSMContext):
    state_data = await state.get_data()
    await state.clear()
    add_places = await service.add_places_on_tour(state_data['name'], int(event.text))
    if add_places:
        users_list = await service.get_all_users_ids()
        if users_list is not None:
            send, not_send = await notify_about_places(users_list, state_data['name'], int(event.text))
            await event.answer(
                text=f"–ú–µ—Å—Ç–∞ –Ω–∞ —Ç—É—Ä {state_data['name']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã\n\n"
                     f"–ö–æ–ª-–≤–æ —á–µ–ª–æ–≤–µ–∫, –ø–æ–ª—É—á–∏–≤—à–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {send}\n–ù–µ –ø–æ–ª—É—á–∏–ª–∏: {not_send}",
                reply_markup=tour_menu().as_markup())
        else:
            await event.answer(
                text=f"–ú–µ—Å—Ç–∞ –Ω–∞ —Ç—É—Ä {state_data['name']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã\n–ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç–∞ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è",
                reply_markup=tour_menu().as_markup())
    else:
        await event.answer("–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫", reply_markup=tour_menu().as_markup())


# class DeleteTour(StatesGroup):
#     tour_name = State()


# @admin.callback_query(F.data == "deletetour", IsAdmin())
# async def delete_tour(event: CallbackQuery, state: FSMContext):
#     await state.clear()
#     await event.answer()
#     await event.message.delete()
#     tours = await service.get_all_tours()
#     if tours is not None:
#         builder = InlineKeyboardBuilder()
#         for _ in tours:
#             builder.row(
#                 InlineKeyboardButton(text=_['–ù–∞–∑–≤–∞–Ω–∏–µ'], callback_data=f"tourtodeleteadmin_{_['–ù–∞–∑–≤–∞–Ω–∏–µ']}"))
#         builder.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="backtotourmenu"))
#         await event.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=builder.as_markup())
#         await state.set_state(DeleteTour.tour_name)


@admin.callback_query(F.data.startswith("tourtodeleteadmin_"), IsAdmin())
async def delete_tour(event: CallbackQuery, state: FSMContext):
    await state.clear()
    await event.answer()
    await event.message.delete()
    call = event.data.split("_")[1]
    deleted = await service.delete_tour(call)
    if deleted:
        await event.message.answer(text=f"–¢—É—Ä {call} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", reply_markup=tour_menu().as_markup())
    else:
        await event.message.answer(text=f"–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—É—Ä–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=tour_menu().as_markup())


@admin.message(IsAdmin())
async def start(event: Message, state: FSMContext):
    await state.clear()
    await event.answer("<b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>", reply_markup=main_menu().as_markup())
