from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery

from bot.filters.isAdmin import IsAdmin
from bot.handlers.handler_utils import clear_and_delete, send_big_message, answer_and_delete
from bot.keyboards.admin import *
from database import service

admin_direct = Router()

headerAdd = "<b>‚ûï –°–û–ó–î–ê–ù–ò–ï –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø ‚ûï</b>"
headerRemove = "<b>üóë –£–î–ê–õ–ï–ù–ò–ï –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø üóë</b>"
headerMenu = "<b>üó∫ –ú–ï–ù–Æ –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ô üó∫</b>"
directList = "<b>üìã –°–ü–ò–°–û–ö –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ô üìã</b>"


# --------------------
# ADD DIRECTION
# --------------------
class AddDirection(StatesGroup):
    direction = State()


@admin_direct.callback_query(F.data == "AddDirection", IsAdmin())
async def add_direction_start(event: CallbackQuery, state: FSMContext):
    await clear_and_delete(event, state)
    await event.message.answer(
        text=f"{headerAdd}\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
        reply_markup=await back_to("–û—Ç–º–µ–Ω–∏—Ç—å", "BackToDirectionsMenu")
    )
    await state.set_state(AddDirection.direction)


@admin_direct.message(AddDirection.direction, IsAdmin())
async def add_direction(event: Message, state: FSMContext):
    direction = await service.create_destination(event.text)
    if direction:
        await event.answer(
            text=f"{headerAdd}\n‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!",
            reply_markup=await direct_menu()
        )
    else:
        await event.answer(
            text=f"{headerAdd}\n‚Ä¢ –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
            reply_markup=await direct_menu()
        )
    await state.clear()


# --------------------
# DELETE DIRECTION
# --------------------
class DeleteDirection(StatesGroup):
    directions = State()
    dir_name = State()


@admin_direct.callback_query(F.data == "DeleteDirection", IsAdmin())
async def delete_direction_start(event: CallbackQuery, state: FSMContext):
    await clear_and_delete(event, state)
    directions = await service.get_all_destinations()
    if directions:
        await state.update_data(directions=directions)
        await event.message.answer(
            text=f"{headerRemove}\n\n<b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, "
                 "—É–¥–∞–ª—è—Ç—Å—è –í–°–ï —Ç—É—Ä—ã –∏ –£–†–û–ö–ò –ø–æ —ç—Ç–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é! "
                 "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            reply_markup=apply_delete_dir().as_markup()
        )
        await state.set_state(DeleteDirection.directions)
    else:
        await event.message.answer(
            text=f"{headerRemove}\n‚Ä¢ –ü–æ–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            reply_markup=await direct_menu()
        )


@admin_direct.callback_query(F.data.startswith("DeleteDir_"), DeleteDirection.directions, IsAdmin())
async def delete_direction_apply(event: CallbackQuery, state: FSMContext):
    await answer_and_delete(event)
    call = event.data.split("_")[1]
    if call == 'decline':
        await state.clear()
        await event.message.answer(
            text=headerMenu,
            reply_markup=await direct_menu()
        )
        return

    elif call == "apply":
        data = await state.get_data()
        directions = data['directions']
        await event.message.answer(
            text=f"{headerRemove}\n‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
            reply_markup=await simple_build_dynamic_keyboard(
                list_of_values=directions,
                value_key="name",
                callback="DirectionDelete_",
                back_callback="BackToDirectionsMenu",
                back_text="üîô"
            )
        )
        await state.set_state(DeleteDirection.dir_name)


@admin_direct.callback_query(F.data.startswith("DirectionDelete_"), DeleteDirection.dir_name, IsAdmin())
async def delete_direction_choice(event: CallbackQuery, state: FSMContext):
    await clear_and_delete(event, state)
    direction = event.data.split("_")[1]
    has_booked = await service.has_future_bookings_for_destination(direction)

    if has_booked is None or not direction:
        await event.message.answer(
            text=f"{headerRemove}\n‚Ä¢ –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è {direction} –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞",
            reply_markup=await direct_menu()
        )
        return

    if has_booked:
        await event.message.answer(
            text=f"{headerRemove}\n‚Ä¢ –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –ø–æ–∫–∞ –ø–æ –Ω–µ–º—É —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Ç—É—Ä—ã –∏–ª–∏ —É—Ä–æ–∫–∏",
            reply_markup=await direct_menu()
        )
        return

    deleted = await service.delete_destination_by_name(direction)
    if deleted:
        await event.message.answer(
            text=f"{headerRemove}\n‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {direction} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ",
            reply_markup=await direct_menu()
        )

    else:
        await event.message.answer(
            text=f"{headerRemove}\n‚Ä¢ –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è {direction} –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞",
            reply_markup=await direct_menu()
        )


# --------------------
# GET DIRECTION
# --------------------
@admin_direct.callback_query(F.data == "DirectionsList", IsAdmin())
async def directions_list(event: CallbackQuery, state: FSMContext):
    await clear_and_delete(event, state)
    directions = await service.get_all_destinations()

    if directions:
        lines = [f"{directList}"]
        for i, direct in enumerate(directions, start=1):
            lines.append(f"{i}. {direct['name']}")
        text = "\n".join(lines)

        await send_big_message(
            event.message,
            text,
            reply_markup=await direct_menu()
        )
    else:
        await event.message.answer(
            text=f"{directList}\n‚Ä¢ –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            reply_markup=await direct_menu()
        )
