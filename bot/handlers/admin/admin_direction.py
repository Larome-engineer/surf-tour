from aiogram import Router, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import BufferedInputFile
from dependency_injector.wiring import Provide, inject

from DIcontainer import Container
from bot.filters.isAdmin import IsAdmin
from bot.handlers.handler_utils import *
from bot.keyboards.admin import *
from service.booking_service import BookingService
from service.destination_service import DestService
from service.export_service import ExportService

admin_direct = Router()

ADD = "<b>‚ûï –°–û–ó–î–ê–ù–ò–ï –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø ‚ûï</b>"
REMOVE = "<b>üóë –£–î–ê–õ–ï–ù–ò–ï –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø üóë</b>"
MENU = "<b>üó∫ –ú–ï–ù–Æ –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ô üó∫</b>"
LIST = "<b>üìã –°–ü–ò–°–û–ö –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ô üìã</b>"


# --------------------
# ADD DIRECTION
# --------------------
class AddDirection(StatesGroup):
    direction = State()


@admin_direct.callback_query(F.data == "AddDirection", IsAdmin())
async def add_direction_start(event: CallbackQuery, state: FSMContext):
    await clear_and_edit(
        event,
        text=f"{ADD}\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
        reply_markup=back_to("–û—Ç–º–µ–Ω–∏—Ç—å", "BackToDirectionsMenu")
    )
    await state.set_state(AddDirection.direction)


@admin_direct.message(AddDirection.direction, IsAdmin())
@inject
async def add_direction(
        event: Message,
        state: FSMContext,
        dest_service=Provide[Container.destination_service]
):
    direction = await dest_service.create_destination(event.text)
    if direction:
        await event.answer(
            text=f"{ADD}\n‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!",
            reply_markup=direct_menu()
        )
    else:
        await event.answer(
            text=f"{ADD}\n‚Ä¢ –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
            reply_markup=direct_menu()
        )
    await state.clear()


# --------------------
# DELETE DIRECTION
# --------------------
class DeleteDirection(StatesGroup):
    directions = State()
    dir_name = State()


@admin_direct.callback_query(F.data == "DeleteDirection", IsAdmin())
@inject
async def delete_direction_start(
        event: CallbackQuery,
        state: FSMContext,
        dest_service: DestService = Provide[Container.destination_service]
):
    await state.clear()
    await safe_answer(event)
    directions = await dest_service.get_all_destinations()
    if directions:
        await state.update_data(directions=directions)
        await safe_edit_text(
            event,
            text=f"{REMOVE}\n\n<b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, "
                 "—É–¥–∞–ª—è—Ç—Å—è –í–°–ï —Ç—É—Ä—ã –∏ –£–†–û–ö–ò –ø–æ —ç—Ç–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é! "
                 "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            reply_markup=apply_delete_dir()
        )
        await state.set_state(DeleteDirection.directions)
    else:
        await safe_edit_text(
            event,
            text=f"{REMOVE}\n‚Ä¢ –ü–æ–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            reply_markup=direct_menu()
        )


@admin_direct.callback_query(F.data.startswith("DeleteDir_"), DeleteDirection.directions, IsAdmin())
async def delete_direction_apply(event: CallbackQuery, state: FSMContext):
    await safe_answer(event)
    call = event.data.split("_")[1]
    if call == 'decline':
        await state.clear()
        await safe_edit_text(
            event,
            text=MENU,
            reply_markup=direct_menu()
        )
        return

    elif call == "apply":
        data = await state.get_data()
        directions = data['directions']
        await safe_edit_text(
            event,
            text=f"{REMOVE}\n‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
            reply_markup=simple_build_dynamic_keyboard(
                list_of_values=directions,
                value_key="name",
                callback="DirectionDelete_",
                back_callback="BackToDirectionsMenu",
                back_text="üîô"
            )
        )
        await state.set_state(DeleteDirection.dir_name)


@admin_direct.callback_query(F.data.startswith("DirectionDelete_"), DeleteDirection.dir_name, IsAdmin())
@inject
async def delete_direction_choice(
        event: CallbackQuery,
        state: FSMContext,
        booking_service: BookingService = Provide[Container.booking_service]
):
    await safe_answer(event)

    direction = event.data.split("_")[1]
    await state.update_data(direction=direction)

    has_booked = await booking_service.has_future_bookings_for_destination(direction)

    if has_booked is None or not direction:
        await safe_edit_text(
            event,
            text=f"{REMOVE}\n‚Ä¢ –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è {direction} –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞",
            reply_markup=direct_menu()
        )
        return

    if has_booked:
        await safe_edit_text(
            event,
            text=f"{REMOVE}\n‚Ä¢ –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –ø–æ–∫–∞ –ø–æ –Ω–µ–º—É —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Ç—É—Ä—ã –∏–ª–∏ —É—Ä–æ–∫–∏",
            reply_markup=direct_menu()
        )
        return

    await safe_edit_text(
        event,
        text=f"{REMOVE}\n‚Ä¢ –ñ–µ–ª–∞–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º?",
        reply_markup=yes_or_not(
            text_yes="–î–∞",
            callback_yes="ExportDataWhenRemove_yes",
            text_no="–ù–µ—Ç",
            callback_no="ExportDataWhenRemove_no"
        )
    )


@admin_direct.callback_query(F.data.startswith("ExportDataWhenRemove_"), IsAdmin())
@inject
async def export_db(
        event: CallbackQuery,
        state: FSMContext,
        dest_service: DestService = Provide[Container.destination_service]
):
    data = await get_and_clear(state)
    await safe_answer(event)

    answer = event.data.split("_")[1]
    if answer == "yes":
        export = await ExportService.export_db()
        if not export:
            await safe_edit_text(
                event,
                "<b>üíª –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ üíª</b>\n\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ù–ï —É–¥–∞–ª–µ–Ω–æ!\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=main_menu()
            )
            return
        await safe_delete(event)
        filename = f"backup_{datetime.now().strftime('%d.%m.%Y | %H:%M:%S')}.xlsx"
        await event.message.answer_document(
            document=BufferedInputFile(export.read(), filename=filename),
            caption="üì¶ –ë—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö."
        )

    deleted = await dest_service.delete_destination_by_name(data['direction'])
    if not deleted:
        if answer == 'yes':
            await event.message.answer(
                text=f"{REMOVE}\n‚Ä¢ –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è {data['direction']} –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞",
                reply_markup=main_menu()
            )
            return

        await safe_edit_text(
            event,
            text=f"{REMOVE}\n‚Ä¢ –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è {data['direction']} –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞",
            reply_markup=direct_menu()
        )
        return

    if answer == "yes":
        await event.message.answer(
            text=f"{REMOVE}\n‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {data['direction']} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ",
            reply_markup=direct_menu()
        )
        return

    await safe_edit_text(
        event,
        text=f"{REMOVE}\n‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {data['direction']} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ",
        reply_markup=direct_menu()
    )


# --------------------
# GET DIRECTION
# --------------------
@admin_direct.callback_query(F.data == "DirectionsList", IsAdmin())
@inject
async def directions_list(
        event: CallbackQuery,
        state: FSMContext,
        dest_service: DestService = Provide[Container.destination_service]
):
    await state.clear()
    await safe_answer(event)
    directions = await dest_service.get_all_destinations()

    if directions:
        lines = [f"{LIST}"]
        for i, direct in enumerate(directions, start=1):
            lines.append(f"{i}. {direct['name']}")
        text = "\n".join(lines)

        await safe_edit_text(
            event,
            text,
            reply_markup=direct_menu()
        )
    else:
        await safe_edit_text(
            event,
            text=f"{LIST}\n‚Ä¢ –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            reply_markup=direct_menu()
        )
