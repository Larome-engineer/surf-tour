from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram_calendar import SimpleCalendarCallback
from aiogram_calendar.simple_calendar import SimpleCalendar

from bot.filters.isAdmin import IsAdmin
from bot.handlers.handler_utils import clear_and_delete, answer_and_delete, send_big_message
from bot.keyboards.admin import *
from bot.notifications.user_notification import *
from database import service
from utils.validators import is_valid_time

admin_lessons = Router()

headerAdd = "<b>üèÑ –î–û–ë–ê–í–õ–ï–ù–ò–ï –£–†–û–ö–ê üèÑ</b>"
headerAddPlaces = "<b>üë• –£–†–û–ö | –î–û–ë–ê–í–õ–ï–ù–ò–ï –ú–ï–°–¢ üë• </b>"
headerRemove = "<b>üóë –£–î–ê–õ–ï–ù–ò–ï –£–†–û–ö–ê üóë</b>"
headerList = "<b>üìã –°–ü–ò–°–û–ö –£–†–û–ö–û–í üìã</b>"
headerAddType = "<b>‚úèÔ∏è –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–ò–ü–ê –£–†–û–ö–ê ‚úèÔ∏è</b>"


# --------------------
# CREATE LESSON
# --------------------
class AddLesson(StatesGroup):
    direction = State()
    duration = State()
    lesson_type = State()
    desc = State()
    places = State()
    start = State()
    end = State()
    time = State()
    price = State()


@admin_lessons.callback_query(F.data == "AddLesson", IsAdmin())
async def add_lesson_start(event: CallbackQuery, state: FSMContext):
    await clear_and_delete(event, state)
    directions = await service.get_all_destinations()
    types = await service.get_lesson_types()
    if directions is None:
        await event.message.answer(
            text=f"{headerAdd}\n‚Ä¢ –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã 1 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
            reply_markup=await lesson_menu()
        )
    elif types is None:
        await event.message.answer(
            text=f"{headerAdd}\n‚Ä¢ –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã 1 —Ç–∏–ø",
            reply_markup=await lesson_menu()
        )
    else:
        await event.message.answer(
            text=f"{headerAdd}\n‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö",
            reply_markup=await simple_build_dynamic_keyboard(
                list_of_values=directions,
                value_key="name",
                callback="SelectDestWhenAddLesson_",
                back_callback="BackToLessonMenu"
            )
        )
        await state.set_state(AddLesson.direction)


@admin_lessons.callback_query(F.data.startswith("SelectDestWhenAddLesson_"), AddLesson.direction, IsAdmin())
async def add_lesson_choice(event: CallbackQuery, state: FSMContext):
    dest = event.data.split("_")[1]
    await answer_and_delete(event)
    await state.update_data(dest=dest)

    lesson_types = await service.get_lesson_types()
    if lesson_types is None:
        await state.clear()
        await event.message.answer(
            text=f"{headerAdd}\n‚Ä¢ –ü–æ–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ —É—Ä–æ–∫–∞",
            reply_markup=await lesson_menu()
        )
        return

    await event.message.answer(
        text=f"{headerAdd}–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Ä–æ–∫–∞",
        reply_markup=await buttons_by_entity_list_values(
            entity_list=lesson_types,
            callback="GetLessonType_",
            back_to_callback="BackToLessonMenu"
        )
    )
    await state.set_state(AddLesson.lesson_type)


@admin_lessons.callback_query(F.data.startswith("GetLessonType_"), AddLesson.lesson_type, IsAdmin())
async def add_lesson_type(event: CallbackQuery, state: FSMContext):
    less_type = event.data.split("_")[1]
    await state.update_data(type=less_type)
    await answer_and_delete(event)
    await event.message.answer(
        text=f"{headerAdd}\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞",
        reply_markup=await back_to("–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞", callback="BackToLessonMenu")
    )
    await state.set_state(AddLesson.desc)


@admin_lessons.message(AddLesson.desc, IsAdmin())
async def add_lesson_description(event: Message, state: FSMContext):
    await state.update_data(desc=event.text)
    await event.answer(
        text=f"{headerAdd}\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±—â–µ–µ –∫–æ–ª-–≤–æ –º–µ—Å—Ç –Ω–∞ —É—Ä–æ–∫",
        reply_markup=await back_to("–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞", callback="BackToLessonMenu")
    )
    await state.set_state(AddLesson.places)


@admin_lessons.message(AddLesson.places, IsAdmin())
async def add_lesson_places(event: Message, state: FSMContext):
    await state.update_data(places=event.text)
    await event.answer(
        text=f"{headerAdd}\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–∞.\n-> –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
        reply_markup=await SimpleCalendar(locale="ru_RU").start_calendar()
    )
    await state.set_state(AddLesson.start)


@admin_lessons.callback_query(SimpleCalendarCallback.filter(), AddLesson.start, IsAdmin())
async def add_lesson_date(event: CallbackQuery, callback_data: SimpleCalendarCallback, state: FSMContext):
    selected, date = await SimpleCalendar(locale="ru_RU").process_selection(event, callback_data)
    if selected:
        await event.message.delete()
        await state.update_data(start=date)

        await event.message.answer(
            text=f"{headerAdd}\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ß–ß:MM\n<u>–ü—Ä–∏–º–µ—Ä: 10:00</u>",
            reply_markup=await back_to("–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞", callback="BackToLessonMenu")
        )
        await state.set_state(AddLesson.time)


@admin_lessons.message(AddLesson.time, IsAdmin())
async def add_lesson_time(event: Message, state: FSMContext):
    if is_valid_time(event.text):
        await state.update_data(time=event.text)
        await event.answer(
            text=f"{headerAdd}\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: X—á Y –º–∏–Ω\n<u>–ü—Ä–∏–º–µ—Ä: 2—á 30 –º–∏–Ω.</u>",
            reply_markup=await back_to(text="–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞", callback="BackToLessonMenu")
        )
        await state.set_state(AddLesson.duration)
    else:
        await event.answer(
            text=f"{headerAdd}\n‚Ä¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏. –§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ß–ß:MM!\n"
                 f"<u>–ü—Ä–∏–º–µ—Ä: 10:00</u>\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑: –û—Ç–ø—Ä–∞–≤—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫"
        )
        await state.set_state(AddLesson.time)


@admin_lessons.message(AddLesson.duration, IsAdmin())
async def add_lesson_price(event: Message, state: FSMContext):
    await state.update_data(duration=event.text)
    await event.answer(
        text=f"{headerAdd}\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Ä–æ–∫–∞",
        reply_markup=await back_to(text="–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞", callback="BackToLessonMenu")
    )
    await state.set_state(AddLesson.price)


@admin_lessons.message(AddLesson.price, IsAdmin())
async def add_lesson_create(event: Message, state: FSMContext):
    await state.update_data(price=event.text)
    lesson_data = await state.get_data()
    await state.clear()
    lesson = await service.create_lesson(
        desc=lesson_data['desc'],
        duration=lesson_data['duration'],
        places=lesson_data['places'],
        start=lesson_data['start'],
        time=lesson_data['time'],
        lesson_type=lesson_data['type'],
        price=lesson_data['price'],
        dest=lesson_data['dest']
    )
    if lesson[0]:
        date = lesson_data['start']
        lsn_type = lesson_data['type'].split(" ")

        lsn = (
            f"{lsn_type[0][:5]}.{lsn_type[1]} |"
            f"{DAYS_RU[date.weekday()]}, {date.day} {MONTHS_RU[date.month]} | "
            f"{lesson_data['time']}"
        )

        await event.answer(
            text=f"{headerAdd}\n‚Ä¢ –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n> {lsn}\n> –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {lesson_data['dest']}",
            reply_markup=await lesson_menu()
        )
        all_users = await service.get_all_users()
        if all_users is None:
            return

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text=lsn,
                callback_data=f"UserMoreAboutLesson_{lesson[1]}"
            )
        )
        builder.row(InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="UserAccount"))

        for user in all_users:
            try:
                await event.bot.send_message(
                    chat_id=int(user['tg_id']),
                    text=f"üèÑ <b>–û–¢–ö–†–´–õ–°–Ø –ù–û–í–´–ô –£–†–û–ö!</b> üèÑ\n\n"
                         f"‚Ä¢ {lesson_data['type']}\n"
                         f"‚Ä¢ {lesson_data['dest']}\n"
                         f"‚Ä¢ {DAYS_RU[date.weekday()]}, {date.day} {MONTHS_RU[date.month]} | {lesson_data['time']}\n"
                         f"‚¨áÔ∏è –ù–∞–∂–º–∏, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏! ‚¨áÔ∏è",
                    reply_markup=builder.as_markup()
                )
            except Exception as e:
                print(e)
    else:
        await event.answer(
            text=f"{headerAdd}\n‚Ä¢ –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—Ä–æ–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
            reply_markup=await lesson_menu()
        )


# --------------------
# GET LESSON
# --------------------
@admin_lessons.callback_query(F.data == "BookedLessons", IsAdmin())
async def get_all_booked_lessons(event: CallbackQuery, state: FSMContext):
    await clear_and_delete(event, state)
    booked = await service.get_all_booked_lessons_future()
    if booked:
        result = [f"{headerList}\n‚Ä¢ –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤\n"]
        for i, lesson in enumerate(booked, start=1):
            date = datetime.strptime(lesson['start_date'], "%d.%m.%Y")

            result.append(
                f"<b>{i}.{lesson['type']}</b>\n"
                f"üìç {lesson['dest']}\n"
                f"üìÖ {DAYS_RU[date.weekday()]}, {date.day} {MONTHS_RU[date.month]} | {lesson['time']}\n"
                f"üí∂ {lesson['price']}\n"
                f"üë• –ë—Ä–æ–Ω—å:\n{len(lesson['users']) or '‚Äî'} —á–µ–ª–æ–≤–µ–∫"
            )

        # –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
        full_text = "\n\n".join(result)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—è–º–∏
        await send_big_message(
            event.message,
            full_text,
            reply_markup=await lesson_menu()
        )
    else:
        await event.message.answer(
            f"{headerList}\n‚ùå –ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤.",
            reply_markup=await lesson_menu()
        )


@admin_lessons.callback_query(F.data == "AllLessonList", IsAdmin())
async def get_all_lessons(event: CallbackQuery, state: FSMContext):
    await clear_and_delete(event, state)
    lessons = await service.get_all_lessons()
    if lessons is None:
        await event.message.answer(f"{headerList}\n‚Ä¢ –ü–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤", reply_markup=await lesson_menu())
        return

    page = 0
    result = [f"{headerList}\n–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π —É—Ä–æ–∫ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ\n"]
    for i, lesson in enumerate(lessons, start=1):
        date = datetime.strptime(lesson['start_date'], "%d.%m.%Y")
        result.append(
            f"<b>{i}.{lesson['type']}</b>\n"
            f"üó∫ {lesson['dest']}\n"
            f"‚åõ {lesson['duration']}\n"
            f"üìÖ {DAYS_RU[date.weekday()]}, {date.day} {MONTHS_RU[date.month]} | {lesson['time']}\n"
        )

    await event.message.answer(
        f"{'\n'.join(result)}",
        reply_markup=await build_lessons_pagination_keyboard(
            lessons=lessons,
            page=page,
            back_callback="BackToLessonMenu"
        )
    )


# @admin_lessons.callback_query(F.data.startswith("InfoAboutLesson_"), IsAdmin())
@admin_lessons.callback_query(lambda c: (
        c.data.startswith("LessonsList_page:") or
        c.data.startswith("InfoAboutLesson_")
), IsAdmin())
async def get_lesson_by_code(event: CallbackQuery, state: FSMContext):
    await clear_and_delete(event, state)
    data = event.data
    lessons = await service.get_all_lessons()

    if data.startswith("LessonsList_page:"):
        page = int(data.split(":")[1])
        await event.message.answer(
            f"{headerList}\n<b>‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}</b>",
            reply_markup=await build_lessons_pagination_keyboard(
                lessons=lessons,
                page=page,
                back_callback="BackToLessonMenu"
            )
        )
        await event.answer()
    elif data.startswith("InfoAboutLesson_"):
        unicode = data.split("_")[1]
        lesson = await service.get_lesson_by_code(unicode)
        if lesson:
            date = datetime.strptime(lesson['start_date'], "%d.%m.%Y")
            result = (
                f"<b>{lesson['type'].upper()}</b>\n\n"
                f"üó∫ {lesson['dest']}\n"
                f"üìù {lesson['desc']}\n"
                f"üë• –û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç: {lesson['places']}\n"
                f"‚åõ {lesson['duration']}\n"
                f"üìÖ {DAYS_RU[date.weekday()]}, {date.day} {MONTHS_RU[date.month]} | {lesson['time']}\n"
                f"üí∂ {str(lesson['price'])}‚ÇΩ"
            )
            await event.message.answer(
                text=result,
                reply_markup=generate_entity_options(
                    list_of_text=["–î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç", "–£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫", "–ù–∞–∑–∞–¥"],
                    list_of_callback=["AddLessonPlaces_", "DeleteLesson_", "AllLessonList"],
                    entity=lesson,
                    entity_key="unicode"
                ).as_markup()
            )

@admin_lessons.callback_query(F.data == "LessonByDirection", IsAdmin())
async def get_lesson_by_destination_start(event: CallbackQuery, state: FSMContext):
    await clear_and_delete(event, state)
    directions = await service.get_all_destinations()
    if directions is not None:
        await event.message.answer(
            text=f"{headerList}\n‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
            reply_markup=await simple_build_dynamic_keyboard(
                list_of_values=directions,
                value_key="name",
                callback="AdminSearchLessonByDirection_",
                back_callback="BackToLessonMenu"
            )
        )
    else:
        await event.message.answer(
            text="–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π",
            reply_markup=await lesson_menu()
        )


@admin_lessons.callback_query(F.data.startswith("AdminSearchLessonByDirection_"), IsAdmin())
async def get_lesson_by_destination_choice(event: CallbackQuery, state: FSMContext):
    await clear_and_delete(event, state)
    call = event.data.partition("_")[2]
    lessons = await service.get_all_lessons_by_dest(call)

    if lessons:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏
        lines = [
            f"{headerList}\n‚Ä¢ –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —É—Ä–æ–∫–æ–≤ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é {call}"
        ]
        for i, lesson in enumerate(lessons, start=1):
            date = datetime.strptime(lesson['start_date'], "%d.%m.%Y")
            lines.append(
                f"<b>{i}.{lesson['type']}</b>\n"
                f"üó∫ {lesson['dest']}\n"
                f"üìÖ {DAYS_RU[date.weekday()]}, {date.day} {MONTHS_RU[date.month]} | {lesson['time']}\n"
            )


        text = f"\n\n".join(lines)

        await send_big_message(
            message=event.message,
            text=text,
            reply_markup=await build_lessons_pagination_keyboard(
                lessons=lessons,
                back_callback="BackToLessonMenu"
            )
        )
    else:
        await event.message.answer(
            f"{headerList}\n‚Ä¢ –£—Ä–æ–∫–æ–≤ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é {call} –Ω–µ—Ç",
            reply_markup=await lesson_menu()
        )


# --------------------
# UPDATE LESSON
# --------------------
class AddLessonPlaces(StatesGroup):
    places = State()


@admin_lessons.callback_query(F.data.startswith("AddLessonPlaces_"), IsAdmin())
async def add_lesson_places_start(event: CallbackQuery, state: FSMContext):
    call = event.data.split("_")[1]
    await state.update_data(code=call)
    await answer_and_delete(event)
    await event.message.answer(
        text=f"{headerAddPlaces}\n‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –¥–æ–±–∞–≤–ª—è–µ–º—ã—Ö –º–µ—Å—Ç",
        reply_markup=await back_to("–û—Ç–º–µ–Ω–∞", "LessonsList")
    )
    await state.set_state(AddLessonPlaces.places)


@admin_lessons.message(AddLessonPlaces.places, IsAdmin())
async def add_lesson_places_places(event: Message, state: FSMContext):
    state_data = await state.get_data()
    await state.clear()
    add_places = await service.add_places_on_lesson(state_data['code'], int(event.text))
    if add_places:
        users_list = await service.get_all_users_ids()
        if users_list is not None:
            send, not_send = await notify_about_places_lesson(state_data['code'], users_list, places=int(event.text))
            await event.answer(
                text=f"{headerAddPlaces}\n‚Ä¢ –ú–µ—Å—Ç–∞ –Ω–∞ —É—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã\n\n"
                     f"<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n‚úÖ –ü–æ–ª—É—á–∏–ª–∏: {send}\n‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–∏: {not_send}",
                reply_markup=await lesson_menu())
        else:
            await event.answer(
                text=f"{headerAddPlaces}\n‚Ä¢ –ú–µ—Å—Ç–∞ –Ω–∞ —É—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã\n"
                     f"/// –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç–∞ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è",
                reply_markup=await lesson_menu())
    else:
        await event.answer(f"{headerAdd}\n‚Ä¢ –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫", reply_markup=await lesson_menu())


# --------------------
# DELETE LESSON
# --------------------
@admin_lessons.callback_query(F.data.startswith("DeleteLesson_"), IsAdmin())
async def delete_lesson(event: CallbackQuery, state: FSMContext):
    await clear_and_delete(event, state)
    call = event.data.split("_")[1]
    lesson = await service.get_future_paid_lesson(call)
    if lesson is None:
        deleted = await service.delete_lesson(call)
        if deleted:
            await event.message.answer(
                text=f"{headerRemove}\n‚Ä¢ –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
                reply_markup=await lesson_menu()
            )
        else:
            await event.message.answer(
                text=f"{headerRemove}\n‚Ä¢ –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫",
                reply_markup=await lesson_menu()
            )
    else:
        date = datetime.strptime(lesson['start_date'], "%d.%m.%Y")
        result = [
            f"<b>{lesson['type'].upper()}</b>\n\n"
            f"üó∫ {lesson['dest']}\n"
            f"üìù {lesson['desc']}\n"
            f"üë• –û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç: {lesson['places']}\n"
            f"‚åõ {lesson['duration']}\n"
            f"üìÖ {DAYS_RU[date.weekday()]}, {date.day} {MONTHS_RU[date.month]} | {lesson['time']}\n"
            f"üí∂ {str(lesson['price'])}‚ÇΩ\n"
        ]

        await event.message.answer(
            text=f"{headerRemove}\n"
                 f"‚Ä¢ –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª –∏ –∏–º–µ–µ—Ç —Ö–æ—Ç—è –±—ã 1 —É—á–∞—Å—Ç–Ω–∏–∫–∞\n\n"
                 f"{'\n'.join(result)}",
            reply_markup=generate_entity_options(
                list_of_text=["–î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç", "–£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫", "–ù–∞–∑–∞–¥"],
                list_of_callback=["AddLessonPlaces_", "DeleteLesson_", "AllLessonList"],
                entity=lesson, entity_key="unicode"
            ).as_markup()
        )


# --------------------
# CREATE TYPE (THIS IS PART OF LESSON)
# --------------------
class AddLessonType(StatesGroup):
    type = State()


@admin_lessons.callback_query(F.data == "AddLessonType")
async def add_lesson_type(event: CallbackQuery, state: FSMContext):
    await clear_and_delete(event, state)
    await event.message.answer(f"{headerAddType}\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–∏–ø —É—Ä–æ–∫–∞")
    await state.set_state(AddLessonType.type)


@admin_lessons.message(AddLessonType.type)
async def add_lesson_type(event: Message, state: FSMContext):
    await state.clear()
    type_created = await service.add_lesson_type(event.text)
    if type_created:
        await event.answer(
            text=f"{headerAddType}\n‚Ä¢ –¢–∏–ø –¥–æ–±–∞–≤–ª–µ–Ω",
            reply_markup=await lesson_menu()
        )
    else:
        await event.answer(
            text=f"{headerAddType}\n‚Ä¢ –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–ø–∞ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫",
            reply_markup=await lesson_menu()
        )
