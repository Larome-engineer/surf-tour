from aiogram import Router, F
from bot.keyboards.admin import *
from bot.handlers.handler_utils import *
from bot.filters.isAdmin import IsAdmin
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from dependency_injector.wiring import Provide, inject
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from DIcontainer import Container


from aiogram_calendar import SimpleCalendarCallback
from aiogram_calendar.simple_calendar import SimpleCalendar

from bot.notifications.user_notification import notify_about_tour, notify_places_tour
from service.destination_service import DestService
from service.export_service import ExportService
from service.tour_service import TourService
from service.user_service import UserService

admin_tour = Router()

ADD_TOUR = "<b>üèÑ –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–£–†–ê üèÑ</b>"
ADD_PLACES = "<b>üë• –¢–£–† | –î–û–ë–ê–í–õ–ï–ù–ò–ï –ú–ï–°–¢ üë• </b>"
REMOVE = "<b>üóë –£–î–ê–õ–ï–ù–ò–ï –¢–£–†–ê üóë</b>"
LIST = "<b>üìã –°–ü–ò–°–û–ö –¢–£–†–û–í üìã</b>"
BY_DIRECT = "<b>üîé –ü–û–ò–°–ö –¢–£–†–ê –ü–û –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Æ üîé</b>"


class AddTour(StatesGroup):
    direction = State()
    name = State()
    desc = State()
    places = State()
    start = State()
    end = State()
    time = State()
    price = State()


@admin_tour.callback_query(F.data == "AddTour", IsAdmin())
@inject
async def add_tour_start(
        event: CallbackQuery,
        state: FSMContext,
        dest_service: DestService = Provide[Container.destination_service]
):
    await state.clear()
    await safe_answer(event)
    directions = await dest_service.get_all_destinations()
    if directions is None:
        await safe_edit_text(
            event,
            text=f"{ADD_TOUR}\n‚Ä¢ –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã 1 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!",
            reply_markup=tour_menu()
        )
    else:
        await safe_edit_text(
            event,
            text=f"{ADD_TOUR}\n‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–∞ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö",
            reply_markup=simple_build_dynamic_keyboard(
                list_of_values=directions,
                value_key="name",
                callback="DestForAdd_",
                back_callback="BackToTourMenu"
            )
        )
        await state.set_state(AddTour.direction)


@admin_tour.callback_query(F.data.startswith("DestForAdd_"), AddTour.direction, IsAdmin())
async def add_tour_dest(event: CallbackQuery, state: FSMContext):
    await safe_answer(event)
    await state.update_data(dest=event.data.split("_")[1])
    await safe_edit_text(
        event,
        text=f"{ADD_TOUR}\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–∞",
        reply_markup=back_to("–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–∞", "BackToTourMenu")
    )
    await state.set_state(AddTour.name)


@admin_tour.message(AddTour.name, IsAdmin())
async def add_tour_name(event: Message, state: FSMContext):
    await state.update_data(name=event.text)
    await event.answer(
        text=f"{ADD_TOUR}\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–∞",
        reply_markup=back_to("–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–∞", "BackToTourMenu"))
    await state.set_state(AddTour.desc)


@admin_tour.message(AddTour.desc, IsAdmin())
async def add_tour_desc(event: Message, state: FSMContext):
    await state.update_data(desc=event.text)
    await event.answer(
        text=f"{ADD_TOUR}\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±—â–µ–µ –∫–æ–ª-–≤–æ –º–µ—Å—Ç –Ω–∞ —Ç—É—Ä",
        reply_markup=back_to("–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–∞", "BackToTourMenu")
    )
    await state.set_state(AddTour.places)


@admin_tour.message(AddTour.places, IsAdmin())
async def add_tour_places(event: Message, state: FSMContext):
    if int(event.text) <= 0:
        await event.answer(
            text=f"{ADD_TOUR}\n–ö–û–õ-–í–û –ú–ï–°–¢ –î–û–õ–ñ–ù–û –ë–´–¢–¨ > 0\n\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±—â–µ–µ –∫–æ–ª-–≤–æ –º–µ—Å—Ç –Ω–∞ —Ç—É—Ä",
            reply_markup=back_to("–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞", callback="BackToLessonMenu")
        )
        await state.set_state(AddTour.places)
        return
    await state.update_data(places=event.text)
    await event.answer(
        text=f"{ADD_TOUR}\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        reply_markup=await SimpleCalendar(locale="ru_RU").start_calendar()
    )
    await state.set_state(AddTour.start)


@admin_tour.callback_query(SimpleCalendarCallback.filter(), AddTour.start, IsAdmin())
async def add_tour_start_date(event: CallbackQuery, callback_data: SimpleCalendarCallback, state: FSMContext):
    await safe_answer(event)
    selected, date = await SimpleCalendar(locale="ru_RU").process_selection(event, callback_data)
    if selected:
        if date < datetime.now():
            await safe_edit_text(
                event,
                text=f"{ADD_TOUR}\n–ù–ï–ü–†–ê–í–ò–õ–¨–ù–ê–Ø –î–ê–¢–ê. –ü–û–ü–†–û–ë–£–ô–¢–ï –ï–©–ï –†–ê–ó\n\n"
                     f"‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–∞.\n-> –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
                reply_markup=await SimpleCalendar(locale="ru_RU").start_calendar()
            )
            await state.set_state(AddTour.start)
            return
        await state.update_data(start=date)
        await safe_edit_text(
            event,
            text=f"{ADD_TOUR}\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –∫–æ–Ω—Ü–∞ —Ç—É—Ä–∞.\n–î–ª—è –æ—Ç–º–µ–Ω—ã -> /start –¥–ª—è –æ—Ç–º–µ–Ω—ã",
            reply_markup=await SimpleCalendar(locale="ru_RU").start_calendar()
        )
        await state.set_state(AddTour.end)


@admin_tour.callback_query(SimpleCalendarCallback.filter(), AddTour.end, IsAdmin())
async def add_tour_end_date(event: CallbackQuery, callback_data: SimpleCalendarCallback, state: FSMContext):
    await safe_answer(event)
    selected, date = await SimpleCalendar(locale="ru_RU").process_selection(event, callback_data)
    if selected:
        data = await state.get_data()
        if date < data['start']:
            await safe_edit_text(
                event,
                text=f"{ADD_TOUR}\n‚Ä¢ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=SimpleCalendar(locale="ru_RU").start_calendar()
            )
            await state.set_state(AddTour.end)
            return

        await state.update_data(end=date)
        await safe_edit_text(
            event,
            text=f"{ADD_TOUR}\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ß–ß:MM",
            reply_markup=back_to("–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–∞", "BackToTourMenu")
        )
        await state.set_state(AddTour.time)


@admin_tour.message(AddTour.time, IsAdmin())
async def add_tour_time(event: Message, state: FSMContext):
    await state.update_data(time=event.text)
    await event.answer(
        text=f"{ADD_TOUR}\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—É—Ä–∞",
        reply_markup=back_to("–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–∞", "BackToTourMenu")
    )
    await state.set_state(AddTour.price)


@admin_tour.message(AddTour.price, IsAdmin())
@inject
async def add_tour_price(
        event: Message,
        state: FSMContext,
        tour_service: TourService = Provide[Container.tour_service],
        user_service: UserService = Provide[Container.user_service]
):
    tour_data = await get_and_clear(state)

    tour = await tour_service.create_tour(
        tour_name=tour_data['name'],
        tour_desc=tour_data['desc'],
        tour_places=tour_data['places'],
        start_date=tour_data['start'],
        start_time=tour_data['time'],
        end_date=tour_data['end'],
        tour_price=int(event.text),
        tour_destination=tour_data['dest']
    )

    if not tour:
        await event.answer(
            text=f"{ADD_TOUR}\n‚Ä¢ –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
            reply_markup=tour_menu()
        )
        return

    all_users = await user_service.get_all_users()
    if not all_users:
        await event.answer(
            text=f"{ADD_TOUR}\n‚Ä¢ –¢—É—Ä –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é {tour_data['dest']} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω\n"
                 f"/// –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç–∞ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è",
            reply_markup=tour_menu()
        )
        return

    send, not_send = await notify_about_tour(tour=tour_data, users=all_users)
    await event.answer(
        text=f"{ADD_TOUR}\n‚Ä¢ –¢—É—Ä –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é {tour_data['dest']} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω\n"
             f"<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n‚úÖ –ü–æ–ª—É—á–∏–ª–∏: {send}\n‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–∏: {not_send}",
        reply_markup=tour_menu()
    )


@admin_tour.callback_query(F.data == "BookedTours", IsAdmin())
@inject
async def get_booked_tours(
        event: CallbackQuery,
        state: FSMContext,
        tour_service: TourService = Provide[Container.tour_service]
):
    await state.clear()
    await safe_answer(event)

    booked = await tour_service.get_all_booked_tours()
    if not booked:
        await safe_edit_text(
            event,
            text=f"{LIST}\n‚Ä¢ –ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—É—Ä–æ–≤",
            reply_markup=tour_menu()
        )
        return

    await safe_edit_text(
        event,
        text=f"{LIST}\n",
        reply_markup=build_tours_pagination_keyboard(
            list_of_tours=booked,
            back_callback="BackToTourMenu"
        ))


@admin_tour.callback_query(F.data == "AllTourList", IsAdmin())
@inject
async def get_tours_list(
        event: CallbackQuery,
        state: FSMContext,
        tour_service: TourService = Provide[Container.tour_service]
):
    await state.clear()
    await safe_answer(event)

    tours = await tour_service.get_all_tours_with_places()
    if not tours:
        await safe_edit_text(event, f"{LIST}\n‚Ä¢ –ü–æ–∫–∞ –Ω–µ—Ç —Ç—É—Ä–æ–≤", reply_markup=tour_menu())
        return

    await safe_edit_text(
        event,
        text=f"{LIST}\n–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π —Ç—É—Ä –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ\n\n",
        reply_markup=build_tours_pagination_keyboard(
            list_of_tours=tours,
            value_key="name",
            callback="InfoAboutTour_",
            back_callback="BackToTourMenu"
        )
    )


@admin_tour.callback_query(lambda c: (
        c.data.startswith("InfoAboutTour_page:") or
        c.data.startswith("InfoAboutTour_")
), IsAdmin())
@inject
async def get_tour_information(
        event: CallbackQuery,
        state: FSMContext,
        tour_service: TourService = Provide[Container.tour_service]
):
    await state.clear()
    await safe_answer(event)

    data = event.data
    tours = await tour_service.get_all_tours_with_places()

    if "page:" in data:
        page = int(data.split(":")[-1])
        await safe_edit_text(
            event,
            f"{LIST}\n ‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}",
            reply_markup=build_tours_pagination_keyboard(
                list_of_tours=tours,
                value_key="name",
                callback="InfoAboutTour_",
                back_callback="BackToTourMenu",
                page=page,
            )
        )
    elif data.startswith("InfoAboutTour_"):
        tour_name = data.split("_")[1]
        tour = await tour_service.get_tour_by_name(tour_name)
        if tour:
            result = (
                f"<b>{tour['name'].upper()}</b>\n\n"
                f"üîú {tour['dest']}\n"
                f"üìù {tour['desc']}\n"
                f"üë• –ú–µ—Å—Ç–∞: {tour['places']}\n"
                f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {tour['time']}\n"
                f"üìÖ {tour['start_date'].strftime("%d.%m.%Y")} - {tour['end_date'].strftime("%d.%m.%Y")}\n"
                f"üí∞ {str(tour['price'])}‚ÇΩ"
            )
            await safe_edit_text(
                event,
                text=result,
                reply_markup=generate_entity_options(
                    list_of_text=["–î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç", "–£–¥–∞–ª–∏—Ç—å —Ç—É—Ä", "–ù–∞–∑–∞–¥"],
                    list_of_callback=["AddTourPlaces_", "DeleteTour_", "AllTourList"],
                    entity=tour,
                    entity_key="name"
                )
            )


@admin_tour.callback_query(F.data == "TourByDirection", IsAdmin())
@inject
async def get_tours_by_dest_start(
        event: CallbackQuery,
        state: FSMContext,
        dest_service: DestService = Provide[Container.destination_service]
):
    await state.clear()
    await safe_answer(event)
    directions = await dest_service.get_all_destinations()
    if not directions:
        await safe_edit_text(event, "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π", reply_markup=tour_menu())
        return
    await safe_edit_text(
        event,
        text=f"{BY_DIRECT}\n‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
        reply_markup=simple_build_dynamic_keyboard(
            list_of_values=directions,
            value_key="name",
            callback="AdminSearchByDirection_",
            back_callback="BackToTourMenu"
        )
    )


@admin_tour.callback_query(F.data.startswith("AdminSearchByDirection_"), IsAdmin())
@inject
async def get_tours_by_dest_name(
        event: CallbackQuery,
        state: FSMContext,
        tour_service: TourService = Provide[Container.tour_service]
):
    await state.clear()
    await safe_answer(event)
    call = event.data.split("_")[1]
    tours = await tour_service.get_all_tour_by_dest(call)
    if not tours:
        await safe_edit_text(event, f"{LIST}\n‚Ä¢ –¢—É—Ä–æ–≤ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é {call} –Ω–µ—Ç", reply_markup=tour_menu())
        return

    await safe_edit_text(
        event,
        text=f"{LIST}\n–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π —Ç—É—Ä –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ\n\n",
        reply_markup=build_tours_pagination_keyboard(
            list_of_tours=tours,
            value_key="name",
            callback="InfoAboutTour_",
            back_callback="BackToTourMenu"
        )
    )


class AddTourPlaces(StatesGroup):
    places = State()


@admin_tour.callback_query(F.data.startswith("AddTourPlaces_"), IsAdmin())
async def add_tour_places_start(event: CallbackQuery, state: FSMContext):
    await state.update_data(name=event.data.split("_")[1])
    await safe_answer(event)
    await safe_edit_text(
        event,
        text=f"{ADD_PLACES}\n‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –¥–æ–±–∞–≤–ª—è–µ–º—ã—Ö –º–µ—Å—Ç",
        reply_markup=back_to("–û—Ç–º–µ–Ω–∞", "AllTourList")
    )
    await state.set_state(AddTourPlaces.places)


@admin_tour.message(AddTourPlaces.places, IsAdmin())
@inject
async def add_tour_places_choice(
        event: Message,
        state: FSMContext,
        tour_service: TourService = Provide[Container.tour_service],
        user_service: UserService = Provide[Container.user_service]
):
    state_data = await get_and_clear(state)

    try:
        int(event.text)
    except ValueError:
        await event.answer(
            text=f"{ADD_PLACES}\n‚Ä¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ\n\n"
                 f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –¥–æ–±–∞–≤–ª—è–µ–º—ã—Ö –º–µ—Å—Ç",
            reply_markup=back_to("–û—Ç–º–µ–Ω–∞", "AllTourList")
        )
        return

    add_places = await tour_service.add_places_on_tour(state_data['name'], int(event.text))
    if not add_places:
        await event.answer(
            text=f"{ADD_PLACES}\n‚Ä¢ –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫",
            reply_markup=tour_menu()
        )
        return

    tour = await tour_service.get_tour_by_name(state_data['name'])
    users_list = await user_service.get_all_users_ids()
    if not users_list:
        await event.answer(
            text=f"{ADD_PLACES}\n‚Ä¢ –ú–µ—Å—Ç–∞ –Ω–∞ —Ç—É—Ä {state_data['name']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã\n"
                 f"/// –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç–∞ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è",
            reply_markup=tour_menu()
        )
        return

    send, not_send = await notify_places_tour(tour, users_list, int(event.text))
    await event.answer(
        text=f"{ADD_PLACES}\n‚Ä¢ –ú–µ—Å—Ç–∞ –Ω–∞ —Ç—É—Ä {state_data['name']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã\n\n"
             f"<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n‚úÖ –ü–æ–ª—É—á–∏–ª–∏: {send}\n‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–∏: {not_send}",
        reply_markup=tour_menu()
    )


@admin_tour.callback_query(F.data.startswith("DeleteTour_"), IsAdmin())
@inject
async def delete_tour(
        event: CallbackQuery,
        state: FSMContext,
        tour_service: TourService = Provide[Container.tour_service]
):
    await state.clear()
    await safe_answer(event)

    tour_name = event.data.split("_")[1]

    has_booked = await tour_service.get_future_paid_tour(tour_name)
    if has_booked:
        await safe_edit_text(
            event,
            text=f"{REMOVE}\n‚Ä¢ –ù–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–π —Ç—É—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–æ–±—Ä–µ–ª —Ö–æ—Ç—è –±—ã 1 —á–µ–ª–æ–≤–µ–∫!",
            reply_markup=tour_menu())
        return

    await state.update_data(name=tour_name)
    await safe_edit_text(
        event,
        text=f"{REMOVE}\n‚Ä¢ –ñ–µ–ª–∞–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º?",
        reply_markup=any_button_kb(
            text=["–î–∞", "–ù–µ—Ç"],
            callback=["ToRemoveTour_yes", "ToRemoveTour_no"]
        )
    )
    return


@admin_tour.callback_query(F.data.startswith("ToRemoveTour_"), IsAdmin())
@inject
async def yes_to_remove_lesson(
        event: CallbackQuery,
        state: FSMContext,
        tour_service: TourService = Provide[Container.tour_service]
):
    await safe_answer(event)
    data = await get_and_clear(state)
    answer = event.data.split("_")[1]

    if answer == "yes":
        export = await ExportService.export_db()
        if not export:
            await safe_edit_text(
                event,
                "<b>üíª –¢–£–† | –ú–ï–ù–Æ üíª</b>\n\n–¢—É—Ä –ù–ï —É–¥–∞–ª–µ–Ω!\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=tour_menu()
            )
            return

        await safe_delete(event)
        filename = f"backup_{datetime.now().strftime('%d.%m.%Y | %H:%M:%S')}.xlsx"
        await event.message.answer_document(
            document=BufferedInputFile(export.read(), filename=filename),
            caption="üì¶ –ë—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö."
        )

    deleted = await tour_service.delete_tour(data['name'])
    if not deleted:
        if answer == "yes":
            await event.message.answer(
                text=f"{REMOVE}\n‚Ä¢ –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—É—Ä–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞",
                reply_markup=tour_menu()
            )
            return
        await safe_edit_text(
            event,
            text=f"{REMOVE}\n‚Ä¢ –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—É—Ä–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞",
            reply_markup=tour_menu()
        )
        return

    if answer == "yes":
        await event.message.answer(
            text=f"{REMOVE}\n‚Ä¢ –¢—É—Ä {data['name']} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
            reply_markup=tour_menu()
        )
        return
    await safe_edit_text(
        event,
        text=f"{REMOVE}\n‚Ä¢ –¢—É—Ä {data['name']} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
        reply_markup=tour_menu()
    )
