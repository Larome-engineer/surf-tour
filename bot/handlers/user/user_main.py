from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery

from bot.handlers.handler_utils import clear_and_delete
from bot.keyboards.user import *
from database import service
from utils.validators import is_valid_email, is_valid_phone

user_main = Router()


# --------------------
# START
# --------------------
@user_main.message(CommandStart())
async def start(event: Message, state: FSMContext):
    await state.clear()
    user_info = await service.get_user_by_tg_id(event.from_user.id)
    if user_info is None:
        await service.create_user(tg_id=event.from_user.id)
    await event.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=user_main_menu().as_markup())


# --------------------
# USER ACCOUNT
# --------------------
@user_main.callback_query(F.data == "UserAccount")
async def user_account(event: CallbackQuery, state: FSMContext):
    await clear_and_delete(event, state)
    user_info = await service.get_user_by_tg_id(event.from_user.id)
    if user_info is not None:
        result = [f"<b>üÜî {user_info['tg_id']}</b>\n\n"
                  f"üë®üèª‚Äçüíª: {user_info['name'] if user_info['name'] is not None else "-"}\n"
                  f"üìû: {user_info['phone'] if user_info['phone'] is not None else "-"}\n"
                  f"üìß: {user_info['email'] if user_info['email'] is not None else "-"}\n"
                  ]
        await event.message.answer(f"{"\n".join(result)}", reply_markup=user_account_menu().as_markup())


# --------------------
# MAIN MENU
# --------------------
@user_main.callback_query(F.data == "BackToUserMainMenu")
async def back_to_menu(event: CallbackQuery, state: FSMContext):
    await clear_and_delete(event, state)
    await event.message.answer("<b>üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", reply_markup=user_main_menu().as_markup())


# --------------------
# CHANGE DATA
# --------------------
class ChangeData(StatesGroup):
    ch_username = State()
    ch_email = State()
    ch_phone = State()


@user_main.callback_query(F.data == "UserChangeData")
async def change_data(event: CallbackQuery, state: FSMContext):
    await clear_and_delete(event, state)
    await event.message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å",
        reply_markup=await generate_keyboard2(
            list_of_text=["–ò–º—è", "–ü–æ—á—Ç–∞", "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"],
            list_of_callback=["Change_name", "Change_email", "Change_phone"]
        )
    )


@user_main.callback_query(F.data.startswith("Change_"))
async def select_data_to_change(event: CallbackQuery, state: FSMContext):
    await clear_and_delete(event, state)
    call = event.data.split("_")[1]
    txt = "–ò–ó–ú–ï–ù–ï–ù–ò–ï –î–ê–ù–ù–´–•\n\n"
    if call == "name":
        await event.message.answer(
            text=f"{txt}–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –∏–º—è",
            reply_markup=cancel_or_back_to("–û—Ç–º–µ–Ω–∏—Ç—å", "userAccount").as_markup()
        )
        await state.set_state(ChangeData.ch_username)
    elif call == "email":
        await event.message.answer(
            text=f"{txt}–û—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à—É –ø–æ—á—Ç—É",
            reply_markup=cancel_or_back_to("–û—Ç–º–µ–Ω–∏—Ç—å", "userAccount").as_markup()
        )
        await state.set_state(ChangeData.ch_email)
    elif call == "phone":
        await event.message.answer(
            text=f"{txt}–û—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            reply_markup=cancel_or_back_to("–û—Ç–º–µ–Ω–∏—Ç—å", "userAccount").as_markup()
        )
        await state.set_state(ChangeData.ch_phone)


@user_main.message(ChangeData.ch_username)
async def change_name(event: Message, state: FSMContext):
    await state.clear()
    updated = await service.update_user(
        event.from_user.id, name=event.text
    )
    if updated:
        await event.answer(
            text=f"–ò–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n–¢–µ–∫—É—â–µ–µ –∏–º—è: {event.text}",
            reply_markup=user_account_menu().as_markup()
        )
    else:
        await event.answer(
            text="–ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫",
            reply_markup=user_account_menu().as_markup()
        )


@user_main.message(ChangeData.ch_email)
async def change_email(event: Message, state: FSMContext):
    if is_valid_email(event.text):
        await state.clear()
        updated = await service.update_user(event.from_user.id, email=event.text)
        if updated:
            await event.answer(
                text=f"–ü–æ—á—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n–¢–µ–∫—É—â–∞—è –ø–æ—á—Ç–∞: {event.text}",
                reply_markup=user_account_menu().as_markup()
            )
        else:
            await event.answer(
                text="–ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫",
                reply_markup=user_account_menu().as_markup()
            )
    else:
        txt = "–ò–ó–ú–ï–ù–ï–ù–ò–ï –î–ê–ù–ù–´–•\n\n"
        await event.answer(
            text=f"{txt}–ü–æ—á—Ç–∞ {event.text} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à—É –ø–æ—á—Ç—É",
            reply_markup=cancel_or_back_to("–û—Ç–º–µ–Ω–∏—Ç—å", "userAccount").as_markup()
        )
        await state.set_state(ChangeData.ch_email)


@user_main.message(ChangeData.ch_phone)
async def change_phone(event: Message, state: FSMContext):
    if is_valid_phone(event.text):
        await state.clear()
        updated = await service.update_user(event.from_user.id, phone=event.text)
        if updated:
            await event.answer(
                text=f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n–¢–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä: {event.text}",
                reply_markup=user_account_menu().as_markup()
            )
        else:
            await event.answer(
                text="–ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫",
                reply_markup=user_account_menu().as_markup()
            )
    else:
        txt = "–ò–ó–ú–ï–ù–ï–ù–ò–ï –î–ê–ù–ù–´–•\n\n"
        await event.answer(
            text=f"{txt}–ù–æ–º–µ—Ä {event.text} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            reply_markup=cancel_or_back_to("–û—Ç–º–µ–Ω–∏—Ç—å", "userAccount").as_markup()
        )
        await state.set_state(ChangeData.ch_email)
