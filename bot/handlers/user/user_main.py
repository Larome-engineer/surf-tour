from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup, State
from dependency_injector.wiring import Provide, inject

from bot.config import NOTIFICATION_CHAT
from bot.create import payment_payload
from utils.DIcontainer import Container
from bot.handlers.handler_utils import *
from bot.keyboards.user import *
from service.user_service import UserService
from utils.set_commands import set_user_commands
from utils.validators import is_valid_email, is_valid_phone

user_main = Router()

logger_user = logging.getLogger(__name__)

HELLO_MSG = "<b>üè† –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ</b>"
DATA_CHANGE = "<b>‚ôªÔ∏è –ò–ó–ú–ï–ù–ï–ù–ò–ï –î–ê–ù–ù–´–•</b>"
MAIN_MENU = "<b>üè† –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ</b>"

''' USER START COMMAND '''


@user_main.message(CommandStart())
@inject
async def start(
        event: Message,
        state: FSMContext,
        user_service: UserService = Provide[Container.user_service]
):
    await state.clear()
    try:
        payment_payload.pop(event.from_user.id)
    except Exception as e:
        logger_user.error(e)
        pass
    user_info = await user_service.get_user_by_tg_id(event.from_user.id)
    if user_info is None:
        await user_service.create_user(tg_id=event.from_user.id)
        await safe_send(
            text=f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –≤ –±–æ—Ç–∞! üôãüèª‚úÖ\nüÜî {event.from_user.id}",
            chat_id=NOTIFICATION_CHAT
        )
    await set_user_commands(surf_bot, event.from_user.id)
    await event.answer(HELLO_MSG, reply_markup=user_main_menu())


@user_main.callback_query(F.data == "DisableNotifications")
@inject
async def disable_notifications(
        event: CallbackQuery,
        user_service: UserService = Provide[Container.user_service]
):
    await safe_answer(event)
    disabled = await user_service.disable_notifications(event.from_user.id)
    if disabled:
        await safe_edit_text(event, text="‚úñÔ∏èüì® <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã!</b>")
    else:
        await safe_edit_text(
            event,
            text="‚úñÔ∏è –ü—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑"
        )


''' USER ACCOUNT MENU '''


@user_main.callback_query(F.data == "UserAccount")
@inject
async def user_account(
        event: CallbackQuery,
        state: FSMContext,
        user_service: UserService = Provide[Container.user_service]
):
    await safe_answer(event)
    await state.clear()
    user_info = await user_service.get_user_by_tg_id(event.from_user.id)
    if user_info is not None:
        result = [
            f"<b>üÜî {user_info['tg_id']}</b>\n\n"
            f"üë®üèª‚Äçüíª: {user_info['name'] if user_info['name'] is not None else "-"}\n"
            f"üìû: {user_info['phone'] if user_info['phone'] is not None else "-"}\n"
            f"üìß: {user_info['email'] if user_info['email'] is not None else "-"}\n"
        ]

        text = "\n".join(result)
        await safe_edit_text(
            event=event,
            text=f"{text}",
            reply_markup=user_account_menu()
        )


''' BACK TO MAIN MENU'''


@user_main.callback_query(F.data == "BackToUserMainMenu")
async def back_to_menu(event: CallbackQuery, state: FSMContext):
    await state.clear()
    await safe_answer(event)
    await safe_edit_text(
        event,
        text=MAIN_MENU,
        reply_markup=user_main_menu()
    )


'''CHANGE USER DATA'''


class ChangeData(StatesGroup):
    ch_username = State()
    ch_email = State()
    ch_phone = State()


@user_main.callback_query(F.data == "UserChangeData")
async def change_data(event: CallbackQuery, state: FSMContext):
    await clear_and_edit(
        event=event,
        state=state,
        text=f"{DATA_CHANGE}\n‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å",
        reply_markup=generate_keyboard2(
            list_of_text=["ü™™ –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è", "‚úâÔ∏è –ü–æ—á—Ç–∞", "üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"],
            list_of_callback=["Change_name", "Change_email", "Change_phone"]
        )
    )


@user_main.callback_query(F.data.startswith("Change_"))
async def select_data_to_change(event: CallbackQuery, state: FSMContext):
    call = event.data.split("_")[1]
    option_map = {
        "name": [f"{DATA_CHANGE}\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é", ChangeData.ch_username],
        "email": [f"{DATA_CHANGE}\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à—É –ø–æ—á—Ç—É", ChangeData.ch_email],
        "phone": [f"{DATA_CHANGE}\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", ChangeData.ch_phone]
    }
    await clear_and_edit(
        event, state,
        text=option_map[call][0],
        reply_markup=cancel_or_back_to("‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å", "UserAccount")
    )
    await state.set_state(option_map[call][1])


@user_main.message(ChangeData.ch_username)
@inject
async def change_name(
        event: Message,
        state: FSMContext,
        user_service: UserService = Provide[Container.user_service]
):
    await state.clear()
    updated = await user_service.update_user(event.from_user.id, name=event.text)
    if not updated:
        await event.answer(
            text=f"{DATA_CHANGE}\n‚Ä¢ ‚ùå –ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫",
            reply_markup=user_account_menu()
        )
        return

    await event.answer(
        text=f"{DATA_CHANGE}\n‚Ä¢ –ò–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ\n\n–¢–µ–∫—É—â–µ–µ –∏–º—è: {event.text}",
        reply_markup=user_account_menu()
    )


@user_main.message(ChangeData.ch_email)
@inject
async def change_email(
        event: Message,
        state: FSMContext,
        user_service: UserService = Provide[Container.user_service]
):
    if is_valid_email(event.text):
        await state.clear()
        updated = await user_service.update_user(event.from_user.id, email=event.text)
        if not updated:
            await event.answer(
                text=f"{DATA_CHANGE}\n‚Ä¢ ‚ùå –ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫",
                reply_markup=user_account_menu()
            )
            return
        await event.answer(
            text=f"{DATA_CHANGE}\n‚Ä¢ –ü–æ—á—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ ‚úÖ\n\n–¢–µ–∫—É—â–∞—è –ø–æ—á—Ç–∞: {event.text}",
            reply_markup=user_account_menu()
        )
    else:
        await event.answer(
            text=f"{DATA_CHANGE}\n\n–ü–æ—á—Ç–∞ <b>{event.text}</b> –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑\n\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à—É –ø–æ—á—Ç—É",
            reply_markup=cancel_or_back_to("‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å", "userAccount")
        )
        await state.set_state(ChangeData.ch_email)


@user_main.message(ChangeData.ch_phone)
@inject
async def change_phone(
        event: Message,
        state: FSMContext,
        user_service: UserService = Provide[Container.user_service]
):
    if is_valid_phone(event.text):
        await state.clear()
        updated = await user_service.update_user(event.from_user.id, phone=event.text)
        if not updated:
            await event.answer(
                text=f"{DATA_CHANGE}\n‚Ä¢ ‚ùå –ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫",
                reply_markup=user_account_menu()
            )
            return
        await event.answer(
            text=f"{DATA_CHANGE}\n‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω ‚úÖ\n\n–¢–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä: {event.text}",
            reply_markup=user_account_menu()
        )

    else:
        await event.answer(
            text=f"{DATA_CHANGE}\n\n–ù–æ–º–µ—Ä <b>{event.text}</b> –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑\n\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            reply_markup=cancel_or_back_to("–û—Ç–º–µ–Ω–∏—Ç—å", "userAccount")
        )
        await state.set_state(ChangeData.ch_email)
