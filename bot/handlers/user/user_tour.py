from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import LabeledPrice
from dependency_injector.wiring import Provide, inject

from bot.config import PROVIDER_TOKEN
from bot.create import payment_payload
from DIcontainer import Container
from bot.handlers.handler_utils import *
from bot.keyboards.user import *
from service.user_service import UserService
from service.tour_service import TourService
from utils.validators import is_valid_email, is_valid_phone

user_tour = Router()

''' START BOOING TOUR'''


class UserBookTour(StatesGroup):
    tour = State()
    username = State()
    phone = State()
    email = State()
    exists = State()
    apply = State()


@user_tour.callback_query(F.data.startswith("StartBookingTour_"))
@inject
async def start_book_tour(
        event: CallbackQuery,
        state: FSMContext,
        tour_service: TourService = Provide[Container.tour_service],
        user_service: UserService = Provide[Container.user_service]
):
    await state.clear()
    await safe_answer(event)
    tour_name = event.data.split("_")[1]

    tour = await tour_service.get_tour_by_name(tour_name)
    if not tour:
        await safe_edit_text(event, "–¢–∞–∫–æ–≥–æ —Ç—É—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", user_main_menu())
        return
    if tour['places'] <= 0:
        await safe_edit_text(event, "–ú–µ—Å—Ç–∞ –Ω–∞ —Ç—É—Ä –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å", user_main_menu())
        return

    tour_naming = f"üé´<b>–¢–£–† | –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï </b>\n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–∞: {tour_name}"
    already_tour = await tour_service.get_user_tour_details(event.from_user.id, tour_name)

    if already_tour:
        await safe_edit_text(
            event,
            text=f"{tour_naming}\n\n‚ùóÔ∏è –¢—É—Ä —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç—É—Ä–æ–≤.",
            reply_markup=user_main_menu()
        )
        return

    await state.update_data(tour_name=tour_name, tour_naming=tour_naming)

    user_info = await user_service.get_user_by_tg_id(event.from_user.id)
    if user_info['name'] is None or user_info['phone'] is None or user_info['email'] is None:
        await event.message.answer(
            text=f"{tour_naming}\n\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é",
            reply_markup=cancel_or_back_to(text="‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback="BackToUserMainMenu")
        )
        await state.set_state(UserBookTour.username)
    else:
        await state.set_state(UserBookTour.exists)
        await book_tour_applying(event, state)


@user_tour.message(UserBookTour.username)
async def book_tour(event: Message, state: FSMContext):
    state_data = await state.get_data()
    await state.update_data(name=event.text)
    await event.answer(
        text=f"{state_data['tour_naming']}\n\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à email",
        reply_markup=cancel_or_back_to(text="‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback="BackToUserMainMenu")
    )
    await state.set_state(UserBookTour.email)


@user_tour.message(UserBookTour.email)
async def book_tour(event: Message, state: FSMContext):
    state_data = await state.get_data()
    if is_valid_email(event.text):
        await state.update_data(email=event.text)
        await event.answer(
            text=f"{state_data['tour_naming']}\n\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            reply_markup=cancel_or_back_to(text="‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback="BackToUserMainMenu")
        )
        await state.set_state(UserBookTour.phone)
    else:
        await event.answer(
            text=f"{state_data['tour_naming']}\n\n"
                 f"EMAIL <b>{event.text}</b> –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑\n\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à email",
            reply_markup=cancel_or_back_to(text="‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback="BackToUserMainMenu")
        )
        await state.set_state(UserBookTour.email)


@user_tour.message(StateFilter(UserBookTour.phone, UserBookTour.exists))
@inject
async def book_tour_applying(
        event: Message | CallbackQuery,
        state: FSMContext,
        user_service: UserService = Provide[Container.user_service],
        tour_service: TourService = Provide[Container.tour_service]
):
    await safe_answer(event)
    data = await state.get_data()
    if isinstance(event, Message):
        phone = event.text
        now_state = await state.get_state()
        if now_state == "UserBookLesson:phone":
            if is_valid_phone(event.text):
                await state.update_data(phone=phone)
                if 'email' in data.keys() or 'phone' in data.keys() or 'name' in data.keys():
                    updated = await user_service.update_user(event.from_user.id, data['name'], data['email'], phone)
                    if not updated:
                        await state.clear()
                        await event.answer(
                            text=f"{data['tour_naming']}\n\n‚õîÔ∏è –ü—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –í–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ",
                            reply_markup=user_main_menu()
                        )
                        return
            else:
                await event.answer(
                    text=f"{data['tour_naming']}\n\n"
                         f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {event.text} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑\n\n‚Ä¢ "
                         f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                    reply_markup=cancel_or_back_to(text="‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback="BackToUserMainMenu")
                )
                await state.set_state(UserBookTour.phone)
                return

    book_places = 1
    tour_info = await tour_service.get_tour_by_name(data['tour_name'])
    price = tour_info['price'] * book_places

    await state.update_data(
        price=price,
        places=book_places,
        desc=tour_info['desc']
    )

    user_entity = await user_service.get_user_by_tg_id(event.from_user.id)
    text = (
        f"üé´ <b>–ü–û–î–¢–í–ï–†–î–ñ–ï–ù–ò–ï –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø</b> üé´\n\n"
        f"–£—á–∞—Å—Ç–Ω–∏–∫:\n"
        f"üôãüèª {user_entity['name']}\n\n"
        f"üèï {tour_info['name']}\n"
        f"üó∫ {tour_info['dest']}\n"
        f"üìù {tour_info['desc']}\n"
        f"üë• –ö–æ–ª-–≤–æ –±—Ä–æ–Ω–∏—Ä—É–µ–º—ã—Ö –º–µ—Å—Ç: {book_places}\n"
        f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {tour_info['time']}\n"
        f"üìÖ –° {tour_info['start_date'].strftime("%d.%m.%Y")} –ü–û {tour_info['end_date'].strftime("%d.%m.%Y")}\n"
        f"üí∂ {price}\n"
    )

    await send_by_instance(event, text=text, reply_markup=confirm_booking('ApplyUserTourBooking'))
    await state.set_state(UserBookTour.apply)


@user_tour.callback_query(F.data == "ApplyUserTourBooking", UserBookTour.apply)
async def book_tour_send_invoice(event: CallbackQuery, state: FSMContext):
    await safe_answer(event)
    state_data = await get_and_clear(state)

    price: int = state_data['price']
    payment_payload[event.from_user.id] = {
        "tour": {
            "places": state_data['places'],
            "price": price,
            "tour_name": f"{state_data['tour_name']}"
        }
    }

    await safe_answer(event)
    await safe_delete(event)

    prices = [LabeledPrice(label=state_data['tour_name'], amount=price * 100)]
    await event.bot.send_invoice(
        chat_id=event.from_user.id,
        title=state_data['tour_name'],
        description=state_data['desc'],
        payload=f"event: {event.data}",
        provider_token=PROVIDER_TOKEN,
        currency="RUB",
        prices=prices,
        start_parameter="tour_payment",
        need_name=True,
        need_phone_number=True,
        need_email=True
    )


''' UPCOMING USERS TOURS '''


@user_tour.callback_query(F.data == "UpcomingUserTours")
@inject
async def upcoming_tours_list(
        event: CallbackQuery,
        state: FSMContext,
        tour_service: TourService = Provide[Container.tour_service]
):
    await state.clear()
    await safe_answer(event)
    user_tours = await tour_service.get_upcoming_user_tours(event.from_user.id)

    if not user_tours:
        await safe_edit_text(
            event,
            text=f"<b>‚úñÔ∏èüèï –£ –í–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç—É—Ä–æ–≤ —Ç—É—Ä–æ–≤</b>",
            reply_markup=user_account_menu()
        )
        return

    await safe_edit_text(
        event,
        text=f"<b>üèïüîú –í–ê–®–ò –ü–†–ï–î–°–¢–û–Ø–©–ò–ï –¢–£–†–´ </b>\n\n",
        reply_markup=build_tours_upcoming_pagination_keyboard(
            list_of_tours=user_tours,
            value_key='name',
            callback='UpcomingUserTours_',
            back_callback='UserAccount'
        )
    )


@user_tour.callback_query(F.data.startswith("UpcomingUserTours_"))
@inject
async def upcoming_tour_details(
        event: CallbackQuery,
        state: FSMContext,
        tour_service: TourService = Provide[Container.tour_service]
):
    await state.clear()
    await safe_answer(event)
    details = await tour_service.get_user_tour_details(event.from_user.id, event.data.split("_")[1])

    if event.data.startswith("UpcomingUserTours_page:"):
        user_tours = await tour_service.get_upcoming_user_tours(event.from_user.id)
        page = int(event.data.split(":")[1])
        await safe_edit_text(
            event,
            f"<b>üèïüîú –í–ê–®–ò –ü–†–ï–î–°–¢–û–Ø–©–ò–ï –¢–£–†–´ </b>\n\n‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}",
            reply_markup=build_tours_upcoming_pagination_keyboard(
                list_of_tours=user_tours,
                page=page,
                callback="MoreAboutTour_",
                back_callback="UserAccount"
            )
        )
        return

    text = (
        f"<b>üèï {details['name']}</b>\n\n"
        f"üó∫ {details['dest']}\n"
        f"üìù {details['desc']}\n"
        f"üë• –í—Å–µ–≥–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ –º–µ—Å—Ç: 1\n"
        f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {details['time']}\n"
        f"üìÖ –° {details['start_date'].strftime("%d.%m.%Y")} –ü–û {details['end_date'].strftime("%d.%m.%Y")}\n"
        f"üí∂ {details['paid']}\n"
    )

    await safe_edit_text(
        event,
        text=text,
        reply_markup=cancel_or_back_to(
            text="–ù–∞–∑–∞–¥",
            callback="UpcomingUserTours"
        )
    )


@user_tour.callback_query(F.data == "AllToursWithFreePlaces")
@inject
async def tours_list(
        event: CallbackQuery,
        state: FSMContext,
        tour_service: TourService = Provide[Container.tour_service]
):
    await state.clear()
    await safe_answer(event)
    tours = await tour_service.get_all_tours_with_places()
    if not tours:
        await safe_edit_text(event, f"<b>‚úñÔ∏èüèï –ü–æ–∫–∞ –Ω–µ—Ç —Ç—É—Ä–æ–≤</b>", reply_markup=user_main_menu())
        return

    await safe_edit_text(
        event,
        text="üèï <b>–°–ü–ò–°–û–ö –î–û–°–¢–£–ü–ù–´–• –¢–£–†–û–í</b> üèï\n"
             "‚Ä¢ –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π —Ç—É—Ä –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ\n\n",
        reply_markup=build_tours_pagination_keyboard(
            list_of_tours=tours,
            value_key='name',
            callback='MoreAboutTour_',
            back_callback='BackToUserMainMenu'
        )
    )


@user_tour.callback_query(F.data.startswith("MoreAboutTour_"))
@inject
async def tour_information(
        event: CallbackQuery,
        state: FSMContext,
        tour_service: TourService = Provide[Container.tour_service]
):
    await state.clear()
    await safe_answer(event)

    if event.data.startswith("MoreAboutTour_page:"):
        user_tours = await tour_service.get_all_tours_with_places()
        page = int(event.data.split(":")[1])
        await safe_edit_text(
            event,
            f"üèï <b>–°–ü–ò–°–û–ö –î–û–°–¢–£–ü–ù–´–• –¢–£–†–û–í</b> üèï\n‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}",
            reply_markup=build_tours_pagination_keyboard(
                list_of_tours=user_tours,
                page=page,
                callback="MoreAboutTour_",
                back_callback="UserAccount"
            )
        )
        return

    tour = await tour_service.get_tour_by_name(event.data.split('_')[1])

    if not tour:
        await safe_edit_text(event, f"<b>üèï‚úñÔ∏è –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—É—Ä–æ–≤</b>", reply_markup=user_main_menu())
        return

    result = [
        f"<b>üèï {tour['name'].upper()}</b>\n\n"
        f"üó∫ {tour['dest']}\n"
        f"üìù {tour['desc']}\n"
        f"üë• –°–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞: {tour['places']}\n"
        f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {tour['time']}\n"
        f"üìÖ –° {tour['start_date'].strftime("%d.%m.%Y")} –ü–û {tour['end_date'].strftime("%d.%m.%Y")}\n"
        f"üí∂ {tour['price']}‚ÇΩ\n"
    ]

    await safe_edit_text(
        event,
        text=f"{"\n".join(result)}",
        reply_markup=generate_keyboard(
            text="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä",
            callback="StartBookingTour_",
            value_key=tour['name'],
            back_callback="AllToursWithFreePlaces"
        )
    )
